{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "SkyBox API",
    "description" : "The SkyBox APIs allow our users to create, update, delete, and export information within the SkyBox platform. These APIs allow SkyBox to be extensible, giving you the flexibility to grow, develop, and integrate third-party tooling to help scale out your business. To begin using the SkyBox APIs, you will need to generate two unique tokens: an Application Token and an API Token.\n\nTo request a unique Application Token, click here (<a href='https://skybox.vividseats.com/application-sign-up'>https://skybox.vividseats.com/application-sign-up</a>) and refer to this <a href='https://skybox.zendesk.com/hc/en-us/articles/6769735238043-Getting-Started-with-Skybox-APIs'>Zendesk Article</a> for detailed instructions on getting started with SkyBox APIs.\n\nTo generate an API Token when logged in to SkyBox, click on the drop-down under 'Logged In As:', select 'External Accounts', and then select 'API Invitation +'. A modal will appear and you will be prompted to enter the email address to which you want the token sent as well as to provide a brief description of the account.\n\nOnce you have both your Application Token and API Token, there are two ways in which you can make requests: through the UI and through a third party. See below for detailed steps for each process.\n\nRequests through the UI:\n\nTo begin, enter your Account ID in the X-Account field. Once complete, select _Authorize_. Next, enter your API Token in the X-Api-Token field. If you do not currently have an API Token, please follow the steps above to request one. Once complete, select _Authorize_. Last, enter your Application Token in the X-Application-Token field. If you do not have an Application Token, a sample is provided or you can follow the link above to request one. Once complete, select _Authorize_.\n\nRequests through a third party (i.e. Postman):\n\nThe same information is required as it is through the UI, but it will be passed in through headers. It should look something like this:\n\nX-Account: Account ID goes here!\n\nX-Api-Token: API Token goes here!\n\nX-Application-Token: Application Token goes here!\n\nOnce these three items are successfully passed in as headers, you will be able to make sample requests.\n\n<h2><a href='https://skybox.zendesk.com/hc/en-us/articles/5999881334427-SkyBox-API-Rate-Limits'>API Rate Limits</a> </h2>\n\nA rate limit consists of two variables: an interval and a limit. An interval is a period of time, measured in seconds. A limit is the number of calls that can be made to an endpoint in an interval.\n\nFor example, SkyBox’s ‘GET /reports/‘ endpoint has an interval of 1 second and a limit of 1 call per interval. This means that this endpoint has a rate limit of 1 call/second.\n\nEach endpoint, and its respective rate limit, is displayed in this <a href='https://skybox.zendesk.com/hc/en-us/articles/5999881334427-SkyBox-API-Rate-Limits'>Support Article</a>. If the endpoint is not listed, its rate limit is the default, indicated by the ‘*’ at the bottom of the table.\n",
    "termsOfService" : "https://skybox.vividseats.com/api-terms",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://skybox.vividseats.com/services",
    "description" : "Production",
    "variables" : { }
  }, {
    "url" : "http://torpedo.vividseats.com/services",
    "description" : "Stage",
    "variables" : { }
  } ],
  "security" : [ {
    "Application Token" : [ ]
  }, {
    "Authorization Token" : [ ]
  }, {
    "Account" : [ ]
  } ],
  "tags" : [ {
    "name" : "Account",
    "description" : "Account"
  }, {
    "name" : "Addresses",
    "description" : "Addresses"
  }, {
    "name" : "Alerts",
    "description" : "Alerts"
  }, {
    "name" : "Assets",
    "description" : "PDF Upload/Download"
  }, {
    "name" : "Credit Cards",
    "description" : "Credit Cards"
  }, {
    "name" : "Customers",
    "description" : "Customers"
  }, {
    "name" : "Enumerations",
    "description" : "Enumerations"
  }, {
    "name" : "Events",
    "description" : "Events"
  }, {
    "name" : "Event Positions",
    "description" : "Event Positions"
  }, {
    "name" : "External Accounts",
    "description" : "External Accounts"
  }, {
    "name" : "Holds",
    "description" : "Holds"
  }, {
    "name" : "Inventory",
    "description" : "Inventory"
  }, {
    "name" : "Invoices",
    "description" : "Invoices"
  }, {
    "name" : "Lines",
    "description" : "Lines"
  }, {
    "name" : "Mapping",
    "description" : "Mapping"
  }, {
    "name" : "Pricing Group",
    "description" : "Pricing Group"
  }, {
    "name" : "Purchases",
    "description" : "Purchases"
  }, {
    "name" : "Quick Reports",
    "description" : "Endpoints for quick reports"
  }, {
    "name" : "Quick Search",
    "description" : "Quick Search"
  }, {
    "name" : "Reports",
    "description" : "Reports"
  }, {
    "name" : "Research dashboard",
    "description" : "Endpoints for research dashboard"
  }, {
    "name" : "Skybox Drive",
    "description" : "Endpoints for interacting with Skybox Drive."
  }, {
    "name" : "Tags",
    "description" : "Tags"
  }, {
    "name" : "Tickets",
    "description" : "Tickets"
  }, {
    "name" : "Users",
    "description" : "Users"
  }, {
    "name" : "Vendors",
    "description" : "Vendors"
  }, {
    "name" : "Venues",
    "description" : "Venues"
  }, {
    "name" : "Webhooks",
    "description" : "Webhooks",
    "externalDocs" : {
      "description" : "Important Details on Using Webhooks:",
      "url" : "https://skybox.vividseats.com/api-docs/webhooks/"
    }
  } ],
  "paths" : {
    "/account" : {
      "get" : {
        "tags" : [ "Account" ],
        "description" : "Gets an account",
        "operationId" : "accountGet",
        "responses" : {
          "200" : {
            "description" : "account returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "account not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/account/notifications" : {
      "get" : {
        "tags" : [ "Account" ],
        "description" : "Get account notifications",
        "operationId" : "accountGetNotifications",
        "parameters" : [ {
          "name" : "Client-Timezone",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "notifications returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Notification"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/addresses/{address-id}" : {
      "get" : {
        "tags" : [ "Addresses" ],
        "description" : "Retrieves an address by the address id",
        "operationId" : "addressesGetById",
        "parameters" : [ {
          "name" : "address-id",
          "in" : "path",
          "description" : "The address id of the address",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "address returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Address"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "address not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Addresses" ],
        "description" : "Updates an address",
        "operationId" : "addressesUpdate",
        "parameters" : [ {
          "name" : "address-id",
          "in" : "path",
          "description" : "The address id of the address",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "The address object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Address"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "address updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Address"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Addresses" ],
        "description" : "Deletes an address by the address id",
        "operationId" : "addressesDeleteById",
        "parameters" : [ {
          "name" : "address-id",
          "in" : "path",
          "description" : "The address id of the address",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "address deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/addresses" : {
      "post" : {
        "tags" : [ "Addresses" ],
        "description" : "Creates an address",
        "operationId" : "addressesInsert",
        "requestBody" : {
          "description" : "An address object to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Address"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "address created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Address"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/alerts/{alert-id}" : {
      "get" : {
        "tags" : [ "Alerts" ],
        "description" : "Retrieves an alert by the alert id",
        "operationId" : "alertsGetById",
        "parameters" : [ {
          "name" : "alert-id",
          "in" : "path",
          "description" : "The alert id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "alert returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Alert"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "alert not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Alerts" ],
        "description" : "Acknowledges an alert",
        "operationId" : "alertsAcknowledge",
        "parameters" : [ {
          "name" : "alert-id",
          "in" : "path",
          "description" : "The alert id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "alert acknowledged"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/alerts" : {
      "get" : {
        "tags" : [ "Alerts" ],
        "description" : "Retrieves all alerts",
        "operationId" : "alertsGetByAccount",
        "responses" : {
          "200" : {
            "description" : "alerts returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Alert"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/assets/{filename}" : {
      "get" : {
        "tags" : [ "Assets" ],
        "description" : "Retrieves a file, base64 encoded",
        "operationId" : "assetsGet",
        "parameters" : [ {
          "name" : "filename",
          "in" : "path",
          "description" : "Asset file name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "File returned"
          },
          "401" : {
            "description" : "not authorized"
          },
          "500" : {
            "description" : "error contacting file store"
          },
          "404" : {
            "description" : "file not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/assets" : {
      "post" : {
        "tags" : [ "Assets" ],
        "description" : "Uploads a PDF and returns a list of details",
        "operationId" : "assetsUpload",
        "requestBody" : {
          "description" : "The byte array of the PDF",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PdfUpload"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "PDF stored",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PdfDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "500" : {
            "description" : "error storing PDF"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/credit_card/{id}" : {
      "get" : {
        "tags" : [ "Credit Cards" ],
        "description" : "Retrieves a broker credit card by its id",
        "operationId" : "creditCardsGetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the credit card.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "credit card returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditCard"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "credit card not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Credit Cards" ],
        "description" : "Deletes a credit card",
        "operationId" : "creditCardsDelete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the credit card.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "credit card deleted"
          },
          "400" : {
            "description" : "invalid request"
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/credit_card/group/{id}" : {
      "get" : {
        "tags" : [ "Credit Cards" ],
        "description" : "Retrieves a credit card group by its id",
        "operationId" : "creditCardsGetGroupById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the credit card group",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "credit card group returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditCardGroup"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "group not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Credit Cards" ],
        "description" : "Deletes a credit card group",
        "operationId" : "creditCardsDeleteGroup",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the credit card group.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "card group deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/credit_card/group/{group-id}/cards" : {
      "get" : {
        "tags" : [ "Credit Cards" ],
        "description" : "Gets all cards associated with a credit card group",
        "operationId" : "creditCardsGetCreditCards",
        "parameters" : [ {
          "name" : "group-id",
          "in" : "path",
          "description" : "The id of the credit card group.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "credit cards returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CustomerCard"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/credit_card" : {
      "get" : {
        "tags" : [ "Credit Cards" ],
        "description" : "Retrieves a credit card  by account id",
        "operationId" : "creditCardsGetCreditCardsByAccountId",
        "responses" : {
          "200" : {
            "description" : "credit cards returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreditCard"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "credit cards not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Credit Cards" ],
        "description" : "Updates a broker card",
        "operationId" : "creditCardsUpdate",
        "requestBody" : {
          "description" : "Credit card object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCard"
              }
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCard"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "credit card has been updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditCard"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid request"
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Credit Cards" ],
        "description" : "Creates a broker credit card",
        "operationId" : "creditCardsInsert",
        "requestBody" : {
          "description" : "Credit card object to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCard"
              }
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCard"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "credit card has been created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditCard"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid request"
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/credit_card/group" : {
      "get" : {
        "tags" : [ "Credit Cards" ],
        "description" : "Retrieves all credit card groups",
        "operationId" : "creditCardsQuery",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "lastFourDigits",
          "in" : "query",
          "description" : "Last five digits of the credit card",
          "schema" : {
            "pattern" : "\\d{4,5}",
            "type" : "string"
          }
        }, {
          "name" : "cardType",
          "in" : "query",
          "description" : "Card type to filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "AMEX", "DISCOVER", "MASTERCARD", "UNKNOWN", "VISA" ]
          }
        }, {
          "name" : "nameOnCard",
          "in" : "query",
          "description" : "Name on card",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "groupName",
          "in" : "query",
          "description" : "Credit card group label to filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "CARD_TYPE", "NAME_ON_CARD" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "credit card groups returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreditCardGroup"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Credit Cards" ],
        "description" : "Updates a credit card group",
        "operationId" : "creditCardsUpdateGroup",
        "requestBody" : {
          "description" : "Card group object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCardGroup"
              }
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCardGroup"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "card group has been updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditCardGroup"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Credit Cards" ],
        "description" : "Creates a credit card group",
        "operationId" : "creditCardsInsertGroup",
        "requestBody" : {
          "description" : "Card group object to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCardGroup"
              }
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCardGroup"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "credit card group has been created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditCardGroup"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/customers/{customer-id}/cards" : {
      "get" : {
        "tags" : [ "Customers" ],
        "description" : "Gets all cards associated with a customer",
        "operationId" : "customersGetCards",
        "parameters" : [ {
          "name" : "customer-id",
          "in" : "path",
          "description" : "The id of the customer",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "credit cards returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CustomerCard"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Customers" ],
        "description" : "Adds a credit card to a customer",
        "operationId" : "customersAddCard",
        "parameters" : [ {
          "name" : "customer-id",
          "in" : "path",
          "description" : "The id of the customer",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "The credit card object to add to the customer.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditCard"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "credit card added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerCard"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/customers/tags/remove" : {
      "post" : {
        "tags" : [ "Customers" ],
        "description" : "Deletes all tags from customers with given ids",
        "operationId" : "customersBulkRemoveTags",
        "requestBody" : {
          "description" : "Customer Ids",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/customers/bulk" : {
      "put" : {
        "tags" : [ "Customers" ],
        "description" : "Bulk Customer Update",
        "operationId" : "customersBulkUpdate",
        "requestBody" : {
          "description" : "Bulk customer update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkCustomerUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "Invalid fields (See Json response in javax.validation.Validator format)"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/customers/{customer-id}/tags/actions/delete" : {
      "post" : {
        "tags" : [ "Customers" ],
        "description" : "Deletes tags for a customer",
        "operationId" : "customersDelete",
        "parameters" : [ {
          "name" : "customer-id",
          "in" : "path",
          "description" : "The customer Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Tags to be removed from the customer",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/customers/{customer-id}" : {
      "get" : {
        "tags" : [ "Customers" ],
        "description" : "Retrieves a customer by the customer id",
        "operationId" : "customersGetById",
        "parameters" : [ {
          "name" : "customer-id",
          "in" : "path",
          "description" : "The id of the customer",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "customer returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "customer not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Customers" ],
        "description" : "Updates a customer",
        "operationId" : "customersUpdate",
        "parameters" : [ {
          "name" : "customer-id",
          "in" : "path",
          "description" : "The id of the customer",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "The customer object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "customer has been updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/customers/{customer-id}/cards/{card-id}" : {
      "get" : {
        "tags" : [ "Customers" ],
        "description" : "Retrieves a card associated with a customer",
        "operationId" : "customersGetCard",
        "parameters" : [ {
          "name" : "customer-id",
          "in" : "path",
          "description" : "The id of the customer",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "card-id",
          "in" : "path",
          "description" : "The card id associated to the customer",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "credit card returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerCard"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Customers" ],
        "description" : "Deletes a card associated with a customer",
        "operationId" : "customersRemoveCard",
        "parameters" : [ {
          "name" : "customer-id",
          "in" : "path",
          "description" : "The id of the customer",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "card-id",
          "in" : "path",
          "description" : "The card id associated to the customer",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "card deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/customers/defaults" : {
      "get" : {
        "tags" : [ "Customers" ],
        "description" : "Retrieves default customers for the account",
        "operationId" : "customersGetDefaultsById",
        "responses" : {
          "200" : {
            "description" : "account default customers returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DefaultCustomer"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "customer not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Customers" ],
        "description" : "Updates a default customer",
        "operationId" : "customersUpdateDefault",
        "requestBody" : {
          "description" : "The default customer object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DefaultCustomer"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "customer has been updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultCustomer"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/customers" : {
      "get" : {
        "tags" : [ "Customers" ],
        "description" : "Retrieves all customers",
        "operationId" : "customersSearch",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "customerType",
          "in" : "query",
          "description" : "Customer types to filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "MARKETPLACE", "PERFORMER", "BROKER", "RETAIL", "CONCIERGE", "TRAVELAGENT", "MEMBER" ]
            }
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Whitespace separated list of tags to search by",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "tagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiTag",
          "in" : "query",
          "description" : "Tags to exclude",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "antiTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "displayName",
          "in" : "query",
          "description" : "Display name search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "email",
          "in" : "query",
          "description" : "Email search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lastName",
          "in" : "query",
          "description" : "Last name search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "company",
          "in" : "query",
          "description" : "Company search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "City search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "Country search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "phone",
          "in" : "query",
          "description" : "Phone number to search by (matching phone 1 and phone 2 fields)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "invoiceDateFrom",
          "in" : "query",
          "description" : "From Invoice Date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "invoiceDateTo",
          "in" : "query",
          "description" : "To Invoice Date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "ID", "DISPLAY_NAME", "CUSTOMER_TYPE", "EMAIL", "LAST_NAME", "COMPANY", "CITY", "STATE", "COUNTRY" ]
          }
        }, {
          "name" : "arThresholdReached",
          "in" : "query",
          "description" : "Whether arThreshold is Reached to search by",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "createdDateFrom",
          "in" : "query",
          "description" : "From created date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdDateTo",
          "in" : "query",
          "description" : "To created date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "paymentMethod",
          "in" : "query",
          "description" : "Payment method",
          "schema" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "customers returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Customers" ],
        "description" : "Creates a customer",
        "operationId" : "customersInsert",
        "requestBody" : {
          "description" : "A customer object to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Customer"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "customer has been created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customer"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/customers/{customer-id}/cards/{card-id}/default" : {
      "put" : {
        "tags" : [ "Customers" ],
        "description" : "Set a card associated with a customer as the default card",
        "operationId" : "customersSetDefaultCard",
        "parameters" : [ {
          "name" : "customer-id",
          "in" : "path",
          "description" : "The id of the customer",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "card-id",
          "in" : "path",
          "description" : "The card id associated to the customer",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default credit card updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/customers/{customer-id}/tags" : {
      "post" : {
        "tags" : [ "Customers" ],
        "description" : "Inserts a new tags for a customer. Duplicates are ignored",
        "operationId" : "customersTag",
        "parameters" : [ {
          "name" : "customer-id",
          "in" : "path",
          "description" : "The id of the customer",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Tags to be removed from the customer",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tag inserted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/enumerations/{enumtype}" : {
      "get" : {
        "tags" : [ "Enumerations" ],
        "description" : "Retrieves available enumerations",
        "operationId" : "enumerationsEnumeration",
        "parameters" : [ {
          "name" : "enumtype",
          "in" : "path",
          "description" : "The type of enumeration",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "account_setting_categories", "account_setting_names", "audit_action", "audit_entity", "card_type", "consignment_sale_status", "country_type", "currency", "customer_type", "delivery_method", "email_protocol", "event", "field_name", "fulfillment_status", "hold_status", "holding_marketplace", "instant_transfer_status", "integration_provider", "inventory_status", "invoice_status", "line_item_type", "line_type", "marketplace", "payment_method", "payment_status", "permission", "permission_category", "purchase_status", "report_categories,", "seat", "state_type", "term", "ticket_split_type", "ticket_status", "ticket_stock_type", "ups_shipping_charge_status", "ups_shipping_confirmation_type", "ups_shipping_service_code", "vendor_type", "automator" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "enumeration list returned"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "incorrect request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/events/tags/remove" : {
      "post" : {
        "tags" : [ "Events" ],
        "description" : "Deletes all tags from events with given ids",
        "operationId" : "eventsBulkRemoveTags",
        "requestBody" : {
          "description" : "Event Ids",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/events/{event-id}/tags/actions/delete" : {
      "post" : {
        "tags" : [ "Events" ],
        "description" : "Deletes tags for an event",
        "operationId" : "eventsDelete",
        "parameters" : [ {
          "name" : "event-id",
          "in" : "path",
          "description" : "The event Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Tags to be removed from the event",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/events/{event_id}/deltas" : {
      "get" : {
        "tags" : [ "Events" ],
        "description" : "Retrieves event deltas",
        "operationId" : "eventsFindEventDeltas",
        "parameters" : [ {
          "name" : "event_id",
          "in" : "path",
          "description" : "The id of the event to retrieve",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Event deltas returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventDelta"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/events/{event-id}" : {
      "get" : {
        "tags" : [ "Events" ],
        "description" : "Returns an event",
        "operationId" : "eventsGet",
        "parameters" : [ {
          "name" : "event-id",
          "in" : "path",
          "description" : "The id of the event to retrieve",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "event returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "event not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/events/categories" : {
      "get" : {
        "tags" : [ "Events" ],
        "description" : "Retrieves all categories",
        "operationId" : "eventsGetCategories",
        "responses" : {
          "200" : {
            "description" : "categories returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/events/performers/{performer-id}" : {
      "get" : {
        "tags" : [ "Events" ],
        "description" : "Retrieves a performer by the performer id",
        "operationId" : "eventsGetPerformerById",
        "parameters" : [ {
          "name" : "performer-id",
          "in" : "path",
          "description" : "Performer id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "performer returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Performer"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "performer not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/events/performers" : {
      "get" : {
        "tags" : [ "Events" ],
        "description" : "Retrieves all performers",
        "operationId" : "eventsGetPerformers",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "performers returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Performer"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/events" : {
      "get" : {
        "tags" : [ "Events" ],
        "description" : "Retrieves filtered events",
        "operationId" : "eventsIndex",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Page number of results to show. Limit size for Event searches is: 1000",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "tagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiTag",
          "in" : "query",
          "description" : "Tags to exclude",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "antiTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Event search term",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventType",
          "in" : "query",
          "description" : "Event Type",
          "schema" : {
            "type" : "string",
            "enum" : [ "CONCERT", "THEATER", "SPORT", "OTHER" ]
          }
        }, {
          "name" : "categoryId",
          "in" : "query",
          "description" : "Category ID filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Category",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "The id of a venue",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "City search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "Country search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "Minimum event date in yyyy-MM-dd format",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "Maximum event date in yyyy-MM-dd format",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventTimeFrom",
          "in" : "query",
          "description" : "Only search events starting not earlier than",
          "schema" : {
            "type" : "string",
            "format" : "partial-time"
          }
        }, {
          "name" : "eventTimeTo",
          "in" : "query",
          "description" : "Only search events starting not later than",
          "schema" : {
            "type" : "string",
            "format" : "partial-time"
          }
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Search Keywords",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Event ID",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer ID filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "dayOfWeek",
          "in" : "query",
          "description" : "Day of the week of events that occur on that day of the week",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "name" : "excludeParking",
          "in" : "query",
          "description" : "Whether parking events are excluded",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "excludeActiveInventory",
          "in" : "query",
          "description" : "Whether active inventories are excluded",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "noTags",
          "in" : "query",
          "description" : "Only return events with no tags",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "ID", "DATE", "EVENT_NAME", "VENUE_NAME", "VENUE_CITY", "VENUE_STATE", "EVENT_TYPE", "CATEGORY_NAME", "MY_SOLD_TICKETS", "TICKET_COUNT", "MY_CANCELLED_TICKETS", "PERFORMER_NAME" ]
          }
        }, {
          "name" : "onlySoldTickets",
          "in" : "query",
          "description" : "Get events with only sold tickets. Default value is false",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "events returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/events/{event-id}/tags" : {
      "post" : {
        "tags" : [ "Events" ],
        "description" : "Inserts a new tags for an event. Duplicates are ignored",
        "operationId" : "eventsTag",
        "parameters" : [ {
          "name" : "event-id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tag inserted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/event_positions/totals" : {
      "get" : {
        "tags" : [ "Event Positions" ],
        "description" : "Retrieves event positions totals",
        "operationId" : "eventPositionsEventPositionsTotals",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "section",
          "in" : "query",
          "description" : "Section search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "row",
          "in" : "query",
          "description" : "Row search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "listed",
          "in" : "query",
          "description" : "Whether inventories are listed",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Event Id to search by",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Event search term",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Search Keywords",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "Minimum event date in yyyy-MM-dd format",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "Maximum event date in yyyy-MM-dd format",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventTimeFrom",
          "in" : "query",
          "description" : "Only search events starting not earlier than",
          "schema" : {
            "type" : "string",
            "format" : "partial-time"
          }
        }, {
          "name" : "eventTimeTo",
          "in" : "query",
          "description" : "Only search events starting not later than",
          "schema" : {
            "type" : "string",
            "format" : "partial-time"
          }
        }, {
          "name" : "dayOfWeek",
          "in" : "query",
          "description" : "Day of the week of events that occur on that day of the week",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "name" : "eventType",
          "in" : "query",
          "description" : "Event Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "CONCERT", "THEATER", "SPORT", "OTHER" ]
          }
        }, {
          "name" : "categoryId",
          "in" : "query",
          "description" : "Category Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Category search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "City search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "tagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "inventoryTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all inventory tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "noTags",
          "in" : "query",
          "description" : "Inventory tags to exclude",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "excludeOnlyZoneInventory",
          "in" : "query",
          "description" : "Whether to exclude events with all zoned inventories",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "excludeParking",
          "in" : "query",
          "description" : "Whether parking events are excluded",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "EVENT_DATE", "EVENT_NAME", "VENUE_NAME", "VENUE_CITY", "VENUE_STATE", "QUANTITY", "COST", "EVENT_TYPE", "CATEGORY_NAME", "LAST_PRICE_UPDATE", "LAST_SALE" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "events positions totals returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventPosition"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/event_positions/values" : {
      "get" : {
        "tags" : [ "Event Positions" ],
        "description" : "Retrieves event positions without totals",
        "operationId" : "eventPositionsEventPositionsValues",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "section",
          "in" : "query",
          "description" : "Section search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "row",
          "in" : "query",
          "description" : "Row search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "listed",
          "in" : "query",
          "description" : "Whether inventories are listed",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Event Id to search by",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Event search term",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Search Keywords",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "Minimum event date in yyyy-MM-dd format",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "Maximum event date in yyyy-MM-dd format",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventTimeFrom",
          "in" : "query",
          "description" : "Only search events starting not earlier than",
          "schema" : {
            "type" : "string",
            "format" : "partial-time"
          }
        }, {
          "name" : "eventTimeTo",
          "in" : "query",
          "description" : "Only search events starting not later than",
          "schema" : {
            "type" : "string",
            "format" : "partial-time"
          }
        }, {
          "name" : "dayOfWeek",
          "in" : "query",
          "description" : "Day of the week of events that occur on that day of the week",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "name" : "eventType",
          "in" : "query",
          "description" : "Event Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "CONCERT", "THEATER", "SPORT", "OTHER" ]
          }
        }, {
          "name" : "categoryId",
          "in" : "query",
          "description" : "Category Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Category search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "City search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "tagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "inventoryTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all inventory tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "noTags",
          "in" : "query",
          "description" : "Inventory tags to exclude",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "excludeOnlyZoneInventory",
          "in" : "query",
          "description" : "Whether to exclude events with all zoned inventories",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "excludeParking",
          "in" : "query",
          "description" : "Whether parking events are excluded",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "EVENT_DATE", "EVENT_NAME", "VENUE_NAME", "VENUE_CITY", "VENUE_STATE", "QUANTITY", "COST", "EVENT_TYPE", "CATEGORY_NAME", "LAST_PRICE_UPDATE", "LAST_SALE" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "events positions without totals returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventPosition"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/event_positions/categories" : {
      "get" : {
        "tags" : [ "Event Positions" ],
        "description" : "Retrieves event positions grouped by category",
        "operationId" : "eventPositionsGetCategories",
        "responses" : {
          "200" : {
            "description" : "categories returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/event_positions/performers" : {
      "get" : {
        "tags" : [ "Event Positions" ],
        "description" : "Retrieves event positions grouped by performer",
        "operationId" : "eventPositionsGetPerformers",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id search filter",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "performer",
          "in" : "query",
          "description" : "Performer name search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventType",
          "in" : "query",
          "description" : "Event Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "CONCERT", "THEATER", "SPORT", "OTHER" ]
          }
        }, {
          "name" : "categoryId",
          "in" : "query",
          "description" : "Category Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "Minimum event date in yyyy-MM-dd format",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "Maximum event date in yyyy-MM-dd format",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "dayOfWeek",
          "in" : "query",
          "description" : "Day of the week of events that occur on that day of the week",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "name" : "excludeParking",
          "in" : "query",
          "description" : "Whether parking events are excluded",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "NAME" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "events returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PerformerPosition"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/event_positions" : {
      "get" : {
        "tags" : [ "Event Positions" ],
        "description" : "Retrieves event positions",
        "operationId" : "eventPositionsIndex",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "section",
          "in" : "query",
          "description" : "Section search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "row",
          "in" : "query",
          "description" : "Row search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "listed",
          "in" : "query",
          "description" : "Whether inventories are listed",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Event Id to search by",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Event search term",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keywords",
          "in" : "query",
          "description" : "Search Keywords",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "Minimum event date in yyyy-MM-dd format",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "Maximum event date in yyyy-MM-dd format",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventTimeFrom",
          "in" : "query",
          "description" : "Only search events starting not earlier than",
          "schema" : {
            "type" : "string",
            "format" : "partial-time"
          }
        }, {
          "name" : "eventTimeTo",
          "in" : "query",
          "description" : "Only search events starting not later than",
          "schema" : {
            "type" : "string",
            "format" : "partial-time"
          }
        }, {
          "name" : "dayOfWeek",
          "in" : "query",
          "description" : "Day of the week of events that occur on that day of the week",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "name" : "eventType",
          "in" : "query",
          "description" : "Event Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "CONCERT", "THEATER", "SPORT", "OTHER" ]
          }
        }, {
          "name" : "categoryId",
          "in" : "query",
          "description" : "Category Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Category search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "City search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "tagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "inventoryTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all inventory tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "noTags",
          "in" : "query",
          "description" : "Inventory tags to exclude",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "excludeOnlyZoneInventory",
          "in" : "query",
          "description" : "Whether to exclude events with all zoned inventories",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "excludeParking",
          "in" : "query",
          "description" : "Whether parking events are excluded",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "EVENT_DATE", "EVENT_NAME", "VENUE_NAME", "VENUE_CITY", "VENUE_STATE", "QUANTITY", "COST", "EVENT_TYPE", "CATEGORY_NAME", "LAST_PRICE_UPDATE", "LAST_SALE" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "events returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventPosition"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/external_accounts" : {
      "get" : {
        "tags" : [ "External Accounts" ],
        "description" : "Get all external accounts",
        "operationId" : "externalAccountsSearch",
        "responses" : {
          "200" : {
            "description" : "external accounts returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExternalAccount"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "External Accounts" ],
        "description" : "Creates an external account",
        "operationId" : "externalAccountsCreate",
        "requestBody" : {
          "description" : "An external account object to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExternalAccount"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "external account returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalAccount"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/external_accounts/{id}" : {
      "get" : {
        "tags" : [ "External Accounts" ],
        "description" : "Get external account by id",
        "operationId" : "externalAccountsGetById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the external account",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "external account returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalAccount"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "External Accounts" ],
        "description" : "Update external accounts",
        "operationId" : "externalAccountsUpdate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the external account",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "The external account object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExternalAccount"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "external account updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExternalAccount"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "External Accounts" ],
        "description" : "Delete external accounts",
        "operationId" : "externalAccountsDelete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the external account",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "external account deleted"
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/holds/{hold-id}" : {
      "get" : {
        "tags" : [ "Holds" ],
        "description" : "Retrieves a hold by the hold id",
        "operationId" : "holdsGetById",
        "parameters" : [ {
          "name" : "hold-id",
          "in" : "path",
          "description" : "The id of the hold",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "hold returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Hold"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "hold not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Holds" ],
        "description" : "Updates a hold",
        "operationId" : "holdsUpdate",
        "parameters" : [ {
          "name" : "hold-id",
          "in" : "path",
          "description" : "The id of the hold",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "The hold object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Hold"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "hold updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Hold"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Holds" ],
        "description" : "Deletes a hold by the hold id",
        "operationId" : "holdsDeleteById",
        "parameters" : [ {
          "name" : "hold-id",
          "in" : "path",
          "description" : "The id of the hold",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "hold deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Hold"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/holds" : {
      "get" : {
        "tags" : [ "Holds" ],
        "description" : "Retrieves all holds",
        "operationId" : "holdsSearch",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Id to filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "inventoryId",
          "in" : "query",
          "description" : "Inventory Id to filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "exchangePosId",
          "in" : "query",
          "description" : "Exchange pos Id filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Event to filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "User filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "User id filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "From event date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "To event date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdDateFrom",
          "in" : "query",
          "description" : "From created date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdDateTo",
          "in" : "query",
          "description" : "To created date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "expiryDateFrom",
          "in" : "query",
          "description" : "From expiry date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "expiryDateTo",
          "in" : "query",
          "description" : "To expiry date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "externalRef",
          "in" : "query",
          "description" : "External reference to filter",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "Category Id filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "EVENT_NAME", "EVENT_DATE", "VENUE_NAME", "VENUE_CITY", "VENUE_STATE", "LISTING_ID", "INVENTORY_QUANTITY", "INVENTORY_SECTION", "INVENTORY_ROW", "SEATS", "INVENTORY_COST", "INVENTORY_LIST_PRICE", "NOTES", "USER", "CREATED_DATE", "EXPIRY_DATE", "EXTERNAL_REF", "CUSTOMER_DISPLAY_NAME" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "holds returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/HoldSummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Holds" ],
        "description" : "Creates a hold",
        "operationId" : "holdsInsert",
        "requestBody" : {
          "description" : "A hold request to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HoldRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "hold created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Hold"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/bulk-merge" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "description" : "Merge all eligible inventories",
        "operationId" : "inventoryBulkMerge",
        "requestBody" : {
          "description" : "Payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MergeInventoryRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "inventories merged",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Inventory"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/tags/remove" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "description" : "Deletes all tags from inventories with given ids",
        "operationId" : "inventoryBulkRemoveTags",
        "requestBody" : {
          "description" : "Inventory Ids",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/bulk-swap-event" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "description" : "Bulk swap event",
        "operationId" : "inventoryBulkSwapEvent",
        "requestBody" : {
          "description" : "Payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkSwapEventRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Event swapped"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "Invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/bulk-update" : {
      "put" : {
        "tags" : [ "Inventory" ],
        "description" : "Bulk update inventory",
        "operationId" : "inventoryBulkUpdate",
        "requestBody" : {
          "description" : "Bulk inventory attributes to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkInventoryUpdateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "inventory updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/bulk-update-expected-value" : {
      "put" : {
        "tags" : [ "Inventory" ],
        "description" : "Bulk Expected Value Update of Inventory",
        "operationId" : "inventoryBulkUpdateExpectedValue",
        "requestBody" : {
          "description" : "Inventory expected value update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ExpectedValueUpdateBulk"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "Invalid fields (See Json response in javax.validation.Validator format)"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/bulk-update-face-value" : {
      "put" : {
        "tags" : [ "Inventory" ],
        "description" : "Bulk Face Value Update of Inventory",
        "operationId" : "inventoryBulkUpdateFaceValue",
        "requestBody" : {
          "description" : "Inventory face value update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/InventoryFaceValueUpdateBulk"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "Invalid fields (See Json response in javax.validation.Validator format)"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "description" : "Get inventory filtered by query parameters",
        "operationId" : "inventorySearch",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Primary field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "EVENT_DATE", "EVENT_NAME", "VENUE_NAME", "VENUE_CITY", "VENUE_STATE", "LAST_PRICE_UPDATE", "QUANTITY" ]
          }
        }, {
          "name" : "stockType",
          "in" : "query",
          "description" : "Stock Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
          }
        }, {
          "name" : "ticketStatus",
          "in" : "query",
          "description" : "Ticket Status search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "AVAILABLE", "SOLD", "ERROR", "CANCELLED" ]
            }
          }
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Event Id search filter",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "inventoryId",
          "in" : "query",
          "description" : "Inventory Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "purchaseId",
          "in" : "query",
          "description" : "Purchase Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "exchangePosId",
          "in" : "query",
          "description" : "Exchange pos Id filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "categoryId",
          "in" : "query",
          "description" : "Category Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "tagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiTag",
          "in" : "query",
          "description" : "Tags to exclude",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "antiTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "eventTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all event tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Event search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventKeywords",
          "in" : "query",
          "description" : "Event keywords filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vendorId",
          "in" : "query",
          "description" : "Vendor Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "excludeVendorId",
          "in" : "query",
          "description" : "Vendor Id to exclude",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "City search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "Country search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "section",
          "in" : "query",
          "description" : "Section search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sectionMatchMode",
          "in" : "query",
          "description" : "Section search partial match filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "EQUAL", "LIKE" ]
          }
        }, {
          "name" : "row",
          "in" : "query",
          "description" : "Row search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "rowMatchMode",
          "in" : "query",
          "description" : "Row search partial match filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "EQUAL", "LIKE" ]
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "Event date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "Event date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventTimeFrom",
          "in" : "query",
          "description" : "Only search events starting not earlier than",
          "schema" : {
            "type" : "string",
            "format" : "partial-time"
          }
        }, {
          "name" : "eventTimeTo",
          "in" : "query",
          "description" : "Only search events starting not later than",
          "schema" : {
            "type" : "string",
            "format" : "partial-time"
          }
        }, {
          "name" : "eventType",
          "in" : "query",
          "description" : "Event Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "CONCERT", "THEATER", "SPORT", "OTHER" ]
          }
        }, {
          "name" : "purchaseDateFrom",
          "in" : "query",
          "description" : "Purchase date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "purchaseDateTo",
          "in" : "query",
          "description" : "Purchase date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "lastUpdateFrom",
          "in" : "query",
          "description" : "Inventory last update date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "lastUpdateTo",
          "in" : "query",
          "description" : "Inventory last update date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "lastPriceUpdateFrom",
          "in" : "query",
          "description" : "Last price update date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "lastPriceUpdateTo",
          "in" : "query",
          "description" : "Last price update date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "sortedByB",
          "in" : "query",
          "description" : "Secondary field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "ID", "SEAT", "SECTION", "ROW", "COST", "LIST_PRICE", "FACE_VALUE", "FACE_VALUE_AVERAGE", "STOCK_TYPE", "IN_HAND_DATE", "IN_HAND_DATE_CALC", "UNIT_COST_AVERAGE", "LAST_PRICE_UPDATE", "PUBLIC_NOTES", "NOTES", "SPLIT_TYPE", "QUANTITY", "BROADCAST", "DAYS_OLD", "EXPECTED_VALUE", "ELECTRONIC_TRANSFER", "CONSIGNMENT", "RECEIVED", "TAGS", "INSTANT_TRANSFER", "TAXED_COST_AVERAGE", "REPLENISHMENT_GROUPS" ]
          }
        }, {
          "name" : "sortDirB",
          "in" : "query",
          "description" : "Secondary direction to sort (asc, desc)",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "filesUploaded",
          "in" : "query",
          "description" : "Whether the results should have Pdfs attached to all tickets",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "barCodesEntered",
          "in" : "query",
          "description" : "Whether the results should have Bar Codes entered in all tickets",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "externalTicketIdEntered",
          "in" : "query",
          "description" : "Whether the results should have external ticket IDs entered in all tickets",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "listed",
          "in" : "query",
          "description" : "Whether the results should have listed inventories",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "expectedValueSet",
          "in" : "query",
          "description" : "Whether the results should have expected value set",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "skipSorting",
          "in" : "query",
          "description" : "Skip sorting of results",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minQuantity",
          "in" : "query",
          "description" : "Minimum quantity search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "maxQuantity",
          "in" : "query",
          "description" : "Maximum quantity search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "minShownQuantity",
          "in" : "query",
          "description" : "Minimum shown quantity search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "maxShownQuantity",
          "in" : "query",
          "description" : "Maximum shown quantity search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "minPrice",
          "in" : "query",
          "description" : "Minimum price search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "maxPrice",
          "in" : "query",
          "description" : "Maximum price search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "minAverageUnitCost",
          "in" : "query",
          "description" : "Minimum average unit cost search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "maxAverageUnitCost",
          "in" : "query",
          "description" : "Maximum average unit cost search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "lowSeat",
          "in" : "query",
          "description" : "Low seat search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "highSeat",
          "in" : "query",
          "description" : "High seat search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "inHand",
          "in" : "query",
          "description" : "Whether the results should be in hand",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "notes",
          "in" : "query",
          "description" : "Notes search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "publicNotes",
          "in" : "query",
          "description" : "Public notes search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "noTags",
          "in" : "query",
          "description" : "Whether the results should have tags",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeTickets",
          "in" : "query",
          "description" : "Whether the results should include tickets",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "zoneSeating",
          "in" : "query",
          "description" : "Whether the results should have zone seating",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "dayOfWeek",
          "in" : "query",
          "description" : "Day of the week of events that occur on that day of the week",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "name" : "seatType",
          "in" : "query",
          "description" : "Seat Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "CONSECUTIVE", "ALTERNATING", "GA", "PIGGYBACK" ]
          }
        }, {
          "name" : "splitType",
          "in" : "query",
          "description" : "Split Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "DEFAULT", "ANY", "CUSTOM", "NEVERLEAVEONE" ]
          }
        }, {
          "name" : "noSplits",
          "in" : "query",
          "description" : "Whether the results should have splits",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "currencyCode",
          "in" : "query",
          "description" : "Currency type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          }
        }, {
          "name" : "hiddenSeats",
          "in" : "query",
          "description" : "Whether the results should have hidden seats",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "cooperative",
          "in" : "query",
          "description" : "Whether the results belong to a cooperative PO",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "electronicTransfer",
          "in" : "query",
          "description" : "Whether the results should have electronic transfer",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "vsrOption",
          "in" : "query",
          "description" : "VSR option search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "ALL", "EVENT_INVENTORY", "OTHER", "NONE" ]
          }
        }, {
          "name" : "replenishmentGroupId",
          "in" : "query",
          "description" : "Replenishment group id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "consignment",
          "in" : "query",
          "description" : "Whether the results belong to a consignment type PO",
          "schema" : {
            "type" : "string",
            "enum" : [ "YES", "NO", "COMPLETED" ]
          }
        }, {
          "name" : "consignmentStatus",
          "in" : "query",
          "description" : "Whether the results belong to a consignment status",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "received",
          "in" : "query",
          "description" : "Whether the results are received",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "onHold",
          "in" : "query",
          "description" : "Whether the results are on hold",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "daysOldFrom",
          "in" : "query",
          "description" : "Days Old date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "daysOldTo",
          "in" : "query",
          "description" : "Days Old date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "excludeParking",
          "in" : "query",
          "description" : "Whether parking events are excluded",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "instantTransferStatus",
          "in" : "query",
          "description" : "Whether the results belong to a instant transfer status",
          "schema" : {
            "type" : "string",
            "enum" : [ "YES", "NO", "OPTED_OUT" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "inventory summaries returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InventorySummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Inventory" ],
        "description" : "Bulk Price Update of Inventory",
        "operationId" : "inventoryBulkUpdatePrice",
        "requestBody" : {
          "description" : "Inventory price update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/InventoryPriceUpdateBulk"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "Invalid fields (See Json response in javax.validation.Validator format)"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/bulk-taxed-cost-value" : {
      "put" : {
        "tags" : [ "Inventory" ],
        "description" : "Bulk Taxed Cost Update of Inventory",
        "operationId" : "inventoryBulkUpdateTaxedCost",
        "requestBody" : {
          "description" : "Inventory taxed cost update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/InventoryTaxedCostUpdateBulk"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "Invalid fields (See Json response in javax.validation.Validator format)"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/{inventory-id}/tags/actions/delete" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "description" : "Deletes tags for an inventory",
        "operationId" : "inventoryDelete",
        "parameters" : [ {
          "name" : "inventory-id",
          "in" : "path",
          "description" : "The inventory Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Tags to be removed from the inventory",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/{inventory-id}/hold" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "description" : "Get holds for inventory",
        "operationId" : "inventoryGetHoldsById",
        "parameters" : [ {
          "name" : "inventory-id",
          "in" : "path",
          "description" : "The ID of the inventory to return the hold",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "hold returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Hold"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Inventory" ],
        "description" : "Delete holds for inventory",
        "operationId" : "inventoryDeleteHoldsById",
        "parameters" : [ {
          "name" : "inventory-id",
          "in" : "path",
          "description" : "The ID of the inventory from which to delete holds",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "holds deleted"
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/export" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "description" : "Exports inventory for exchange integration. Export is limited to future events with a list price greater than 0. The results from this method are un-sorted.",
        "operationId" : "inventoryExport",
        "parameters" : [ {
          "name" : "includeZeroPricedListings",
          "in" : "query",
          "description" : "Whether the results includes zero price listings",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeHeld",
          "in" : "query",
          "description" : "Whether the results includes held",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeTaxedCosts",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "Version",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "inventory summaries returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InventorySummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/export/delta" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "description" : "Exports inventory for exchange integration. Export is limited to future events with a list price greater than 0. The results from this method are un-sorted.",
        "operationId" : "inventoryExportDelta",
        "parameters" : [ {
          "name" : "timestamp",
          "in" : "query",
          "description" : "Results returned will have newer update timestamps than this value",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeZeroPricedListings",
          "in" : "query",
          "description" : "Whether the results includes zero price listings",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeHeld",
          "in" : "query",
          "description" : "Whether the results includes held",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeTaxedCosts",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "inventory summaries returned with timestamp of request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InventorySummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/{inventory-id}" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "description" : "Get Inventory",
        "operationId" : "inventoryGetById",
        "parameters" : [ {
          "name" : "inventory-id",
          "in" : "path",
          "description" : "The ID of the inventory to return",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "inventory returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Inventory"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "inventory not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Inventory" ],
        "description" : "Update Inventory",
        "operationId" : "inventoryUpdate",
        "parameters" : [ {
          "name" : "inventory-id",
          "in" : "path",
          "description" : "The Id of the inventory to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "changeSeatNumbers",
          "in" : "query",
          "description" : "Whether is allow to change seat number",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "Inventory update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Inventory"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "inventory updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/exchange_pos_id/{exchangePosId}" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "description" : "Get the history for a exchange pos id",
        "operationId" : "inventoryGetExchangesPosId",
        "parameters" : [ {
          "name" : "exchangePosId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list of exchange pos id history returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExchangePosIdHistoryResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/barcodes/{exchange-pos-id}" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "description" : "Get barcodes for inventory",
        "operationId" : "inventoryGetInventoryBarcodes",
        "parameters" : [ {
          "name" : "exchange-pos-id",
          "in" : "path",
          "description" : "The Exchange POS ID of the inventory",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "inventory bar codes returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InventoryBarcodeResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/delta" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "description" : "Get changed inventory (created, updated, deleted) by update time",
        "operationId" : "inventoryGetInventoryDeltas",
        "parameters" : [ {
          "name" : "startTime",
          "in" : "query",
          "description" : "Returns inventory updates after this time, iso yyyy-MM-ddTHH:mm:ssZ format.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "endTime",
          "in" : "query",
          "description" : "Returns inventory updates before this time, iso yyyy-MM-ddTHH:mm:ssZ format.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketStatus",
          "in" : "query",
          "description" : "Returns inventory updates with requested ticket status.",
          "schema" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "SOLD", "ERROR", "CANCELLED" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "updated inventory ids returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "number"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/tags" : {
      "delete" : {
        "tags" : [ "Inventory" ],
        "description" : "Deletes all tags from inventories with given ids",
        "operationId" : "inventoryLegacyBulkRemoveTags",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "Inventory Ids",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "deprecated" : true,
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/merge" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "description" : "Merge the list of inventories into a new inventory",
        "operationId" : "inventoryMerge",
        "requestBody" : {
          "description" : "Payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MergeInventoryRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "inventory created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Inventory"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/merge-as-piggyback" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "description" : "Merge inventories as piggyback",
        "operationId" : "inventoryMergeAsPiggyback",
        "requestBody" : {
          "description" : "Payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MergeInventoryRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "inventories merged",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Inventory"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/{inventory-id}/price-history" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "description" : "Retrieves price update history for inventory",
        "operationId" : "inventoryPriceHistory",
        "parameters" : [ {
          "name" : "inventory-id",
          "in" : "path",
          "description" : "The Id of the inventory",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "price history retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InventoryPriceHistory"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/{inventory-id}/tags/{tag}" : {
      "delete" : {
        "tags" : [ "Inventory" ],
        "description" : "Deletes a tag for an inventory",
        "operationId" : "inventoryRemoveTag",
        "parameters" : [ {
          "name" : "inventory-id",
          "in" : "path",
          "description" : "The Id of the inventory",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "tag",
          "in" : "path",
          "description" : "Tag to be removed from the inventory",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "tag deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "deprecated" : true,
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/purchased" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "description" : "Gets purchased inventory filtered by query parameters",
        "operationId" : "inventorySearchPurchased",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "stockType",
          "in" : "query",
          "description" : "Stock Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
          }
        }, {
          "name" : "ticketStatus",
          "in" : "query",
          "description" : "Ticket Status search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "AVAILABLE", "SOLD", "ERROR", "CANCELLED" ]
            }
          }
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Event Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "inventoryId",
          "in" : "query",
          "description" : "Inventory Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "vendorId",
          "in" : "query",
          "description" : "Vendor Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Purchase tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "tagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all PO tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiTag",
          "in" : "query",
          "description" : "PO tags to exclude",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "antiTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all PO tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Event search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "City search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "Country search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "section",
          "in" : "query",
          "description" : "Section search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "row",
          "in" : "query",
          "description" : "Row search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "purchaseDateFrom",
          "in" : "query",
          "description" : "Purchase date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "purchaseDateTo",
          "in" : "query",
          "description" : "Purchase date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "Event date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "Event date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "externalRef",
          "in" : "query",
          "description" : "External reference search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentStatus",
          "in" : "query",
          "description" : "Payment status search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
            }
          }
        }, {
          "name" : "partialPaymentRef",
          "in" : "query",
          "description" : "Partial payment reference search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "displayName",
          "in" : "query",
          "description" : "Vendor display name search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "zoneSeating",
          "in" : "query",
          "description" : "Whether the results should have zone seating",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "notes",
          "in" : "query",
          "description" : "Notes search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "performer",
          "in" : "query",
          "description" : "Performer search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "purchaseId",
          "in" : "query",
          "description" : "Purchase Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "inHandDateFrom",
          "in" : "query",
          "description" : "In hand date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "inHandDateTo",
          "in" : "query",
          "description" : "In hand date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "received",
          "in" : "query",
          "description" : "Whether the results have received POs",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "venueIds",
          "in" : "query",
          "description" : "Venue id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "name" : "consignment",
          "in" : "query",
          "description" : "Whether the results have a consignment type POs",
          "schema" : {
            "type" : "string",
            "enum" : [ "YES", "NO", "COMPLETED" ]
          }
        }, {
          "name" : "cooperative",
          "in" : "query",
          "description" : "Whether the results have cooperative POs",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "EVENT_DATE", "EVENT_NAME", "VENUE_NAME", "EVENT_TYPE", "VENUE_CITY", "VENUE_STATE", "STOCK_TYPE", "PURCHASE_DATE", "VENDOR_ID", "CREATED_BY", "PAYMENT_STATUS", "PAYMENT_METHOD", "PURCHASE_ID", "SECTION", "ROW", "QUANTITY", "COST", "UNIT_COST", "VENDOR_DISPLAY_NAME", "EXTERNAL_REF", "STATUS" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "purchased inventory summaries returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PurchasedInventorySummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/purchased/V2" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "description" : "Gets purchased inventory filtered by query parameters",
        "operationId" : "inventorySearchPurchasedV2",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "stockType",
          "in" : "query",
          "description" : "Stock Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
          }
        }, {
          "name" : "ticketStatus",
          "in" : "query",
          "description" : "Ticket Status search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "AVAILABLE", "SOLD", "ERROR", "CANCELLED" ]
            }
          }
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Event Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "inventoryId",
          "in" : "query",
          "description" : "Inventory Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "vendorId",
          "in" : "query",
          "description" : "Vendor Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Purchase tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "tagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all PO tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiTag",
          "in" : "query",
          "description" : "PO tags to exclude",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "antiTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all PO tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Event search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "City search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "Country search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "section",
          "in" : "query",
          "description" : "Section search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "row",
          "in" : "query",
          "description" : "Row search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "purchaseDateFrom",
          "in" : "query",
          "description" : "Purchase date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "purchaseDateTo",
          "in" : "query",
          "description" : "Purchase date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "Event date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "Event date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "externalRef",
          "in" : "query",
          "description" : "External reference search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentStatus",
          "in" : "query",
          "description" : "Payment status search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
            }
          }
        }, {
          "name" : "partialPaymentRef",
          "in" : "query",
          "description" : "Partial payment reference search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "displayName",
          "in" : "query",
          "description" : "Vendor display name search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "zoneSeating",
          "in" : "query",
          "description" : "Whether the results should have zone seating",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "notes",
          "in" : "query",
          "description" : "Notes search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "performer",
          "in" : "query",
          "description" : "Performer search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "purchaseId",
          "in" : "query",
          "description" : "Purchase Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "inHandDateFrom",
          "in" : "query",
          "description" : "In hand date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "inHandDateTo",
          "in" : "query",
          "description" : "In hand date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "received",
          "in" : "query",
          "description" : "Whether the results have received POs",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "venueIds",
          "in" : "query",
          "description" : "Venue id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "name" : "consignment",
          "in" : "query",
          "description" : "Whether the results have a consignment type POs",
          "schema" : {
            "type" : "string",
            "enum" : [ "YES", "NO", "COMPLETED" ]
          }
        }, {
          "name" : "cooperative",
          "in" : "query",
          "description" : "Whether the results have cooperative POs",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "EVENT_DATE", "EVENT_ID", "EVENT_NAME", "VENUE_NAME", "EVENT_TYPE", "VENUE_CITY", "VENUE_STATE", "CATEGORY_NAME", "STOCK_TYPE", "PURCHASE_DATE", "VENDOR_ID", "CREATED_BY", "PAYMENT_STATUS", "PAYMENT_METHOD", "PURCHASE_ID", "SECTION", "ROW", "QUANTITY", "COST", "UNIT_COST", "VENDOR_DISPLAY_NAME", "EXTERNAL_REF", "STATUS", "CREDIT_CARD_GROUP", "CREDIT_CARD_LAST_DIGITS", "TICKET_FACE_VALUE_AVERAGE", "OUTSTANDING_BALANCE", "NOTES", "PERFORMER_NAME", "LAST_PURCHASE_NOTE", "INVENTORY_PUBLIC_NOTES", "SEATS", "IN_HAND_DATE", "CONSIGNMENT", "RECEIVED", "STATE", "CURRENCY", "ZONE_SEATING", "PO_TAGS", "AVAILABLE_COST", "PO_STATUS", "INVENTORY_TAGS", "EVENT_TAGS" ]
          }
        }, {
          "name" : "creditCardGroupId",
          "in" : "query",
          "description" : "Credit card group id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "creditCardLastDigits",
          "in" : "query",
          "description" : "Credit card last digits search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventType",
          "in" : "query",
          "description" : "Event Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "CONCERT", "THEATER", "SPORT", "OTHER" ]
          }
        }, {
          "name" : "inHand",
          "in" : "query",
          "description" : "Whether the results should be in hand",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "inventoryTag",
          "in" : "query",
          "description" : "Inventory tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "inventoryTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all inventory tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiInventoryTag",
          "in" : "query",
          "description" : "Inventory tags to exclude",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "antiInventoryTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all inventory tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "noTags",
          "in" : "query",
          "description" : "Whether the results should have inventory tags",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includesSeat",
          "in" : "query",
          "description" : "Seat search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "paymentMethod",
          "in" : "query",
          "description" : "Payment method search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          }
        }, {
          "name" : "minUnitCost",
          "in" : "query",
          "description" : "Minimum unit cost search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "maxUnitCost",
          "in" : "query",
          "description" : "Maximum unit cost search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "minTotalCost",
          "in" : "query",
          "description" : "Minimum total cost search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "maxTotalCost",
          "in" : "query",
          "description" : "Maximum total cost search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "createdBy",
          "in" : "query",
          "description" : "Email search filter for PO creator",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "createdByUserId",
          "in" : "query",
          "description" : "Id search filter for invoice creator",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "currencyCode",
          "in" : "query",
          "description" : "Currency filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          }
        }, {
          "name" : "purchaseStatus",
          "in" : "query",
          "description" : "Purchase status search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CONTACT_NEEDED", "COMPLETED", "DELIVERY_FAILURE", "EVENT_CANCELLED", "EVENT_RESCHEDULED", "INVESTIGATION_CLOSED", "INVESTIGATION_CLOSED_BUYER_FAVOR", "INVESTIGATION_CLOSED_SELLER_FAVOR", "INVESTIGATION_PENDING", "MANAGER_REVIEW", "ORDER_PARTIALLY_VOID_CANCELLED", "ORDER_VOID_CANCELLED", "WAITING_FOR_RESPONSE" ]
            }
          }
        }, {
          "name" : "categoryId",
          "in" : "query",
          "description" : "Performer category search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "lastPurchaseOrderNote",
          "in" : "query",
          "description" : "Last purchase order note",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inventoryPublicNotes",
          "in" : "query",
          "description" : "Inventory public notes",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventTag",
          "in" : "query",
          "description" : "Event tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "eventTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all event tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiEventTag",
          "in" : "query",
          "description" : "Event tags to exclude",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "antiEventTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all the event tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "purchased inventory summaries returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PurchasedInventorySummaryV2"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/sold" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "description" : "Gets sold inventory filtered by query parameters",
        "operationId" : "inventorySearchSold",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "EVENT_DATE", "EVENT_DAY_OF_WEEK", "EVENT_NAME", "EVENT_TYPE", "VENUE_NAME", "VENUE_CITY", "VENUE_STATE", "CATEGORY_NAME", "INVOICE_DATE", "LAST_INVOICE_NOTES_DATE", "LAST_INVOICE_NOTES", "DISPLAY_NAME", "STOCK_TYPE", "TOTAL", "INVOICE_ID", "SECTION", "ROW", "QUANTITY", "COST", "EXPECTED_VALUE", "FULFILLMENT_STATUS", "PAYMENT_STATUS", "INVOICE_EXTERNAL_REF", "PURCHASE_EXTERNAL_REF", "PERFORMER_NAME", "CUSTOMER_DISPLAY_NAME", "IN_HAND_DATE", "AVERAGE_UNIT_COST", "UNIT_TICKET_SALES", "PUBLIC_NOTES", "NOTES", "PROFIT", "PROFIT_MARGIN", "TAGS", "OUTSTANDING_BALANCE", "INVOICE_STATUS", "LAST_INVOICE_STATUS_DATE", "LAST_INVOICE_STATUS_USER", "CUSTOMER_TYPE", "DAYS_LISTED", "SEATS", "ELECTRONIC_TRANSFER", "RECEIVED", "CREATED_BY", "FULFILLMENT_DATE", "LAST_INVOICE_NOTES_USER", "PURCHASE_ID", "CURRENCY", "PURCHASE_DATE", "EVENT_ID", "ZONE_SEATING", "TAXED_COST", "TAXED_COST_AVERAGE", "EVENT_TAGS" ]
          }
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Event Id to search on",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "inventoryId",
          "in" : "query",
          "description" : "Inventory Id to search on",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "exchangePosId",
          "in" : "query",
          "description" : "Exchange pos Id filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "invoiceId",
          "in" : "query",
          "description" : "Invoice Id to search on",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "purchaseIds",
          "in" : "query",
          "description" : "Purchase Id to search on",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "vendorId",
          "in" : "query",
          "description" : "Vendor Id to search on",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "eventType",
          "in" : "query",
          "description" : "Event Type to search on",
          "schema" : {
            "type" : "string",
            "enum" : [ "CONCERT", "THEATER", "SPORT", "OTHER" ]
          }
        }, {
          "name" : "categoryId",
          "in" : "query",
          "description" : "Category Id filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "tagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiTag",
          "in" : "query",
          "description" : "Tags to exclude",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "antiTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiEventTag",
          "in" : "query",
          "description" : "Event tags to exclude",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "antiEventTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all the event tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "noTags",
          "in" : "query",
          "description" : "Whether the results should have tags",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "invoiceTag",
          "in" : "query",
          "description" : "Invoice tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "invoiceTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all invoice tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "eventTag",
          "in" : "query",
          "description" : "Event tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "eventTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all event tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "purchaseTag",
          "in" : "query",
          "description" : "Purchase tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "purchaseTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all purchase tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "Customer Id to filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "customerDisplayName",
          "in" : "query",
          "description" : "Customer display name filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "performer",
          "in" : "query",
          "description" : "Performer to search on",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventKeywords",
          "in" : "query",
          "description" : "Event keywords filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Event to search on",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "From event date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "To event date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "section",
          "in" : "query",
          "description" : "Section search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "row",
          "in" : "query",
          "description" : "Row search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includesSeat",
          "in" : "query",
          "description" : "Seat search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "invoiceDateFrom",
          "in" : "query",
          "description" : "Invoice date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "invoiceDateTo",
          "in" : "query",
          "description" : "Invoice date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "currencyCode",
          "in" : "query",
          "description" : "Currency type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          }
        }, {
          "name" : "externalRef",
          "in" : "query",
          "description" : "Invoice external ref filter",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "purchaseExternalRef",
          "in" : "query",
          "description" : "Purchase external ref filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentStatus",
          "in" : "query",
          "description" : "Payment status to search on",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
            }
          }
        }, {
          "name" : "invoiceStatus",
          "in" : "query",
          "description" : "Invoice status search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CONTACT_NEEDED", "COMPLETED", "DELIVERY_FAILURE", "EVENT_CANCELLED", "EVENT_RESCHEDULED", "INVESTIGATION_CLOSED", "INVESTIGATION_CLOSED_BUYER_FAVOR", "INVESTIGATION_CLOSED_SELLER_FAVOR", "INVESTIGATION_PENDING", "MANAGER_REVIEW", "ORDER_PARTIALLY_VOID_CANCELLED", "ORDER_VOID_CANCELLED", "WAITING_FOR_RESPONSE" ]
            }
          }
        }, {
          "name" : "fulfillmentStatus",
          "in" : "query",
          "description" : "Fulfillment status search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "PENDING", "COMPLETE" ]
          }
        }, {
          "name" : "stockType",
          "in" : "query",
          "description" : "Stock Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
          }
        }, {
          "name" : "zoneSeating",
          "in" : "query",
          "description" : "Whether the results should have zone seating",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "pdfsOrBarcodesAttached",
          "in" : "query",
          "description" : "Whether the results should have Pdfs or Bar Codes attached to all tickets",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "filesUploaded",
          "in" : "query",
          "description" : "Whether the results should have Pdfs attached to all tickets",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "barcodesEntered",
          "in" : "query",
          "description" : "Whether the results should have Bar Codes entered in all tickets",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "electronicTransfer",
          "in" : "query",
          "description" : "Whether the results should have electronic transfer",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "internalNotes",
          "in" : "query",
          "description" : "Internal notes search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inHandDateFrom",
          "in" : "query",
          "description" : "From in hand date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "inHandDateTo",
          "in" : "query",
          "description" : "To in hand date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "fulfillmentDateFrom",
          "in" : "query",
          "description" : "From fulfillment date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "fulfillmentDateTo",
          "in" : "query",
          "description" : "To fulfillment date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "purchaseDateFrom",
          "in" : "query",
          "description" : "Purchase date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "purchaseDateTo",
          "in" : "query",
          "description" : "Purchase date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "cooperative",
          "in" : "query",
          "description" : "Whether the results are cooperative",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "received",
          "in" : "query",
          "description" : "Whether the results are received",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "invoiceNotes",
          "in" : "query",
          "description" : "Invoice notes search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "publicNotes",
          "in" : "query",
          "description" : "Public notes search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "Country search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "due",
          "in" : "query",
          "description" : "Whether the inventories are due or not",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "invoiceCreatedBy",
          "in" : "query",
          "description" : "Email search filter for invoice creator",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "createdByUserId",
          "in" : "query",
          "description" : "User id of invoice creator",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "dayOfWeek",
          "in" : "query",
          "description" : "Day of the week of events that occur on that day of the week",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "name" : "lastUpdateFrom",
          "in" : "query",
          "description" : "Inventory last update date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "invoiceNotesUserId",
          "in" : "query",
          "description" : "Invoice notes user id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "consignment",
          "in" : "query",
          "description" : "Whether the results have a consignment type POs",
          "schema" : {
            "type" : "string",
            "enum" : [ "YES", "NO", "COMPLETED" ]
          }
        }, {
          "name" : "customerType",
          "in" : "query",
          "description" : "Whether the results have a customer type of the Invoice",
          "schema" : {
            "type" : "string",
            "enum" : [ "MARKETPLACE", "PERFORMER", "BROKER", "RETAIL", "CONCIERGE", "TRAVELAGENT", "MEMBER" ]
          }
        }, {
          "name" : "excludeParking",
          "in" : "query",
          "description" : "Whether parking events are excluded",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minTotalCost",
          "in" : "query",
          "description" : "Minimum total cost search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "maxTotalCost",
          "in" : "query",
          "description" : "Maximum total cost search filter",
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "sold inventory summaries returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SoldInventorySummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/sold/bulk-swap-event" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "description" : "Sold bulk swap event",
        "operationId" : "inventorySoldBulkSwapEvent",
        "requestBody" : {
          "description" : "Payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkSoldSwapEventRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Event swapped"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "Invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/{inventory-id}/split" : {
      "put" : {
        "tags" : [ "Inventory" ],
        "description" : "Splits inventory into 2 new inventory groups",
        "operationId" : "inventorySplit",
        "parameters" : [ {
          "name" : "inventory-id",
          "in" : "path",
          "description" : "The ID of the inventory to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "The ticket quantity of the first group",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "integer",
                "format" : "int32"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "inventory split, the new inventory id is returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "number"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/{inventory-id}/split-to-consecutive" : {
      "put" : {
        "tags" : [ "Inventory" ],
        "description" : "Splits inventory into 2 new inventory consecutive groups",
        "operationId" : "inventorySplitToConsecutive",
        "parameters" : [ {
          "name" : "inventory-id",
          "in" : "path",
          "description" : "The ID of the inventory to update",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "inventory split, the new inventory id is returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "number"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/{inventory-id}/actions/split-to-originals" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "description" : "Splits and merges inventories to leave them as they were when purchased",
        "operationId" : "inventorySplitToOriginals",
        "parameters" : [ {
          "name" : "inventory-id",
          "in" : "path",
          "description" : "The Id of the inventory to split",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "split was successful",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Inventory"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/sync" : {
      "put" : {
        "tags" : [ "Inventory" ],
        "description" : "Sync Inventory with integrated services",
        "operationId" : "inventorySync",
        "requestBody" : {
          "description" : "The inventory Ids to sync",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncInventoryRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/{inventory-id}/tags" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "description" : "Inserts a new tags for an inventory. Duplicates are ignored",
        "operationId" : "inventoryTag",
        "parameters" : [ {
          "name" : "inventory-id",
          "in" : "path",
          "description" : "The Id of the inventory",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Tags to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tag inserted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/inventory/actions/edit-section-row" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "description" : "Updates section and row for an inventory",
        "operationId" : "inventoryUpdatePurchaseInventory",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePurchaseInventoryRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "update successful"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/tags/remove" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "description" : "Deletes all tags from invoices with given ids",
        "operationId" : "invoicesBulkRemoveTags",
        "requestBody" : {
          "description" : "Invoice Ids",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/tags/actions/delete" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "description" : "Deletes tags for an invoice",
        "operationId" : "invoicesDelete",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The invoice Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Tags to be removed from the invoice",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/lines/{line-id}" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "description" : "Gets an invoice line",
        "operationId" : "invoicesGetInvoiceLine",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "line-id",
          "in" : "path",
          "description" : "The line id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invoice line returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Line"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Invoices" ],
        "description" : "Updates an invoice line. Only quantity, amount, and description can be updated.",
        "operationId" : "invoicesUpdateInvoiceLine",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "line-id",
          "in" : "path",
          "description" : "The line id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "An invoice object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Line"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "invoice line updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Line"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          },
          "404" : {
            "description" : "invoice line not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Invoices" ],
        "description" : "Deletes an invoice line. Tickets are returned back to the inventory pool.",
        "operationId" : "invoicesDeleteInvoiceLine",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "line-id",
          "in" : "path",
          "description" : "The line id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invoice line deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/assets" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "description" : "Gets invoice assets",
        "operationId" : "invoicesGetAssets",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invoice lines returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          },
          "404" : {
            "description" : "no pdf files for invoice tickets"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "description" : "Retrieves an invoice by the invoice id",
        "operationId" : "invoicesGetInvoiceById",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invoice returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "invoice not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Invoices" ],
        "description" : "Updates an invoice",
        "operationId" : "invoicesUpdateInvoice",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "An invoice object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Invoice"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "invoice updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/lines/{line-id}/tickets" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "description" : "Get tickets for inventory",
        "operationId" : "invoicesGetInvoiceLineTickets",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "line-id",
          "in" : "path",
          "description" : "The line id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "tickets returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticket"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/lines" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "description" : "Gets invoice lines",
        "operationId" : "invoicesGetInvoiceLines",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invoice lines returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Line"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Invoices" ],
        "description" : "Adds an invoice line",
        "operationId" : "invoicesInsertInvoiceLine",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "An invoice object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Line"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "invoice line updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Line"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/external-ref" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "description" : "Returns tickets on an invoice by external ref",
        "operationId" : "invoicesGetInvoiceTicketsByExternalRefV2",
        "parameters" : [ {
          "name" : "external-ref",
          "in" : "query",
          "description" : "The external ref of the invoice",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invoice tickets returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InvoiceTicket"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "invoice tickets not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/transactions" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "description" : "List all transactions appearing on an invoice",
        "operationId" : "invoicesGetTransactionHistory",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "description" : "Searches invoices",
        "operationId" : "invoicesSearch",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "deliveryMethod",
          "in" : "query",
          "description" : "Delivery method search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "COURIER", "EMAIL", "USPS", "UPS", "FEDEX", "WILLCALL", "PAPERLESS", "MEETANDGREET", "FLASHSEATS", "MOBILE_DELIVERY", "OFFICE_PICKUP", "OTHER" ]
            }
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "tagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiTag",
          "in" : "query",
          "description" : "Tags to exclude",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "antiTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "displayName",
          "in" : "query",
          "description" : "Customer display name search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vendorId",
          "in" : "query",
          "description" : "Vendor Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Invoice Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "createdDateFrom",
          "in" : "query",
          "description" : "Invoice creation date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdDateTo",
          "in" : "query",
          "description" : "Invoice creation date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "lastUpdateFrom",
          "in" : "query",
          "description" : "Invoice last update date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "lastUpdateTo",
          "in" : "query",
          "description" : "Invoice last update date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "externalRef",
          "in" : "query",
          "description" : "External reference search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "paymentStatus",
          "in" : "query",
          "description" : "Payment status search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
            }
          }
        }, {
          "name" : "paymentDateFrom",
          "in" : "query",
          "description" : "Invoice payment date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "paymentDateTo",
          "in" : "query",
          "description" : "Invoice payment date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "invoiceStatus",
          "in" : "query",
          "description" : "Invoice status search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CONTACT_NEEDED", "COMPLETED", "DELIVERY_FAILURE", "EVENT_CANCELLED", "EVENT_RESCHEDULED", "INVESTIGATION_CLOSED", "INVESTIGATION_CLOSED_BUYER_FAVOR", "INVESTIGATION_CLOSED_SELLER_FAVOR", "INVESTIGATION_PENDING", "MANAGER_REVIEW", "ORDER_PARTIALLY_VOID_CANCELLED", "ORDER_VOID_CANCELLED", "WAITING_FOR_RESPONSE" ]
            }
          }
        }, {
          "name" : "fulfillmentStatus",
          "in" : "query",
          "description" : "Fulfillment status search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "PENDING", "COMPLETE" ]
          }
        }, {
          "name" : "fulfillmentDateFrom",
          "in" : "query",
          "description" : "Invoice fulfillment date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "fulfillmentDateTo",
          "in" : "query",
          "description" : "Invoice fulfillment date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "paymentRef",
          "in" : "query",
          "description" : "Payment reference search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "barcodesEntered",
          "in" : "query",
          "description" : "Whether the results should have Bar Codes entered in all tickets",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "filesUploaded",
          "in" : "query",
          "description" : "Whether the results should have Pdfs attached to all tickets",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "zoneSeating",
          "in" : "query",
          "description" : "Whether the results should have zone seating",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "performer",
          "in" : "query",
          "description" : "Performer search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "inHandDateFrom",
          "in" : "query",
          "description" : "In hand date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "inHandDateTo",
          "in" : "query",
          "description" : "In hand date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "Event date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "Event date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "Customer Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "eventType",
          "in" : "query",
          "description" : "Event Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "CONCERT", "THEATER", "SPORT", "OTHER" ]
          }
        }, {
          "name" : "categoryId",
          "in" : "query",
          "description" : "Category Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "createdBy",
          "in" : "query",
          "description" : "Email search filter for invoice creator",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "createdByUserId",
          "in" : "query",
          "description" : "Id search filter for invoice creator",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "noTags",
          "in" : "query",
          "description" : "Whether the results should have tags",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "currencyCode",
          "in" : "query",
          "description" : "Currency type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          }
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Event Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "internalId",
          "in" : "query",
          "description" : "Internal Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "purchaseId",
          "in" : "query",
          "description" : "Purchase Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "purchaseLineId",
          "in" : "query",
          "description" : "Purchase line Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "ID", "CREATED_DATE", "DISPLAY_NAME", "DELIVERY_METHOD", "PAYMENT_METHOD", "QUANTITY", "SECTION", "ROW", "CATEGORY_NAME", "TOTAL", "FULFILLMENT_STATUS", "FULFILLMENT_DATE", "PAYMENT_STATUS", "PAYMENT_REF", "EXTERNAL_REF", "LINE_COUNT", "INVOICE_IN_HAND_DATE", "EVENT_DATE", "CREATED_BY", "STOCK_TYPE", "TAGS", "OUTSTANDING_BALANCE", "PERFORMER", "INTERNAL_ID", "SEATS", "RECEIVED", "VENUE", "PURCHASE_ID", "VENDOR", "PAYMENT_DATE", "LAST_INVOICE_NOTES", "LAST_INVOICE_NOTES_USER", "CURRENCY_CODE", "STATUS", "LAST_INVOICE_STATUS_DATE", "LAST_INVOICE_STATUS_USER", "CUSTOMER_ID" ]
          }
        }, {
          "name" : "includeTransactionInfo",
          "in" : "query",
          "description" : "Whether the results include transaction info",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "received",
          "in" : "query",
          "description" : "Whether the results are received",
          "schema" : {
            "type" : "string",
            "enum" : [ "YES", "NO", "MIXED" ]
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stockType",
          "in" : "query",
          "description" : "Stock Type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
          }
        }, {
          "name" : "minTotal",
          "in" : "query",
          "description" : "Minimum total search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "maxTotal",
          "in" : "query",
          "description" : "Maximum total search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "minOutstandingBalance",
          "in" : "query",
          "description" : "Minimum outstanding balance",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "maxOutstandingBalance",
          "in" : "query",
          "description" : "Maximum outstanding balance",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "invoiceNotesUserId",
          "in" : "query",
          "description" : "User id that added the last invoice note search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "invoices returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InvoiceSummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Invoices" ],
        "description" : "Creates an invoice. The minimum fields required for creating an invoices are customerId, lines, line.amount, line.itemIds, line.lineItemType.",
        "operationId" : "invoicesInsertInvoice",
        "parameters" : [ {
          "name" : "force",
          "in" : "query",
          "description" : "Whether is forced to invoice held inventory",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "An invoice object to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Invoice"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "invoice created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/print" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "description" : "Prints an Invoice",
        "operationId" : "invoicesPrint",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "timeZoneOffset",
          "in" : "query",
          "description" : "Time zone off set",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Invoice sent"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/print-auth-form" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "description" : "Prints an Invoice Custom Auth Form",
        "operationId" : "invoicesPrintCustomAuthForm",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "timeZoneOffset",
          "in" : "query",
          "description" : "Time zone off set",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Invoice custom auth form printed"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/payment" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "description" : "Process a payment for a invoice",
        "operationId" : "invoicesProcessPayment",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Payment object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Payment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/transactions/{transaction-id}/refund" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "description" : "Refunds a payment to the card used",
        "operationId" : "invoicesProcessRefund",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "transaction-id",
          "in" : "path",
          "description" : "The transaction id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Refund object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RefundRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/tags/{tag}" : {
      "delete" : {
        "tags" : [ "Invoices" ],
        "description" : "Deletes a tag for an invoice",
        "operationId" : "invoicesRemoveTag",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The invoice Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "tag",
          "in" : "path",
          "description" : "Tag to be removed from the invoice",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "tag deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "deprecated" : true,
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/send" : {
      "get" : {
        "tags" : [ "Invoices" ],
        "description" : "Sends an Invoice to the customer's email address",
        "operationId" : "invoicesSend",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "Id of the invoice",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "emailAddress",
          "in" : "query",
          "description" : "The customer's email addresses in the To email field",
          "required" : true,
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "ccEmailAddress",
          "in" : "query",
          "description" : "The customer's email addresses in the Cc email field",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "bccEmailAddress",
          "in" : "query",
          "description" : "The customer's email addresses in the Bcc email field",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "subject",
          "in" : "query",
          "description" : "Subject of the email",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "message",
          "in" : "query",
          "description" : "Message of the email",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeInvoice",
          "in" : "query",
          "description" : "Whether the email includes the invoice in the body",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "attachTickets",
          "in" : "query",
          "description" : "Whether the email includes tickets attached",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "attachInvoicePDF",
          "in" : "query",
          "description" : "Whether the email includes the invoice PDF attached",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "attachAuthForm",
          "in" : "query",
          "description" : "Whether the email includes the auth form PDF attached",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "timeZoneOffset",
          "in" : "query",
          "description" : "Time zone off set",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Invoice sent"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/{invoice-id}/tags" : {
      "post" : {
        "tags" : [ "Invoices" ],
        "description" : "Inserts a new tags for an invoice. Duplicates are ignored",
        "operationId" : "invoicesTag",
        "parameters" : [ {
          "name" : "invoice-id",
          "in" : "path",
          "description" : "The id of the invoice",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Tags to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tag inserted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/bulk" : {
      "put" : {
        "tags" : [ "Invoices" ],
        "description" : "Bulk Invoice Update",
        "operationId" : "invoicesUpdate",
        "requestBody" : {
          "description" : "Bulk invoice update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkInvoiceUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Invoices Updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "Invalid fields (See Json response in javax.validation.Validator format)"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/invoices/actions/update-invoice-currency" : {
      "put" : {
        "tags" : [ "Invoices" ],
        "description" : "Converts invoice currency using an exchange rate",
        "operationId" : "invoicesUpdateCurrency",
        "requestBody" : {
          "description" : "Payload for bulk action",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceCurrencyUpdateBulkAction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "currency successfully updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/lines/invoice/bulk-cancel" : {
      "post" : {
        "tags" : [ "Lines" ],
        "description" : "Cancel invoice lines. Tickets and purchase lines are canceled as well.",
        "operationId" : "linesCancelInvoiceLines",
        "requestBody" : {
          "description" : "Lines to cancel",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkLineUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "invoice lines canceled"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/lines/bulk-delete" : {
      "post" : {
        "tags" : [ "Lines" ],
        "description" : "Deletes invoice lines. Tickets are returned back to the inventory pool.",
        "operationId" : "linesDeleteInvoiceLines",
        "requestBody" : {
          "description" : "Lines to delete",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkLineUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "invoice lines deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/lines/{line-id}" : {
      "get" : {
        "tags" : [ "Lines" ],
        "description" : "Retrieves a line by the line id. Cancelled tickets are not included in the response.",
        "operationId" : "linesGetLineById",
        "parameters" : [ {
          "name" : "line-id",
          "in" : "path",
          "description" : "The line id of the line",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "line returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Line"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "line not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/mappings/actions/bulk-cancel" : {
      "post" : {
        "tags" : [ "Mapping" ],
        "description" : "Deletes a bulk of mappings and cancels the purchase lines they are associated with",
        "operationId" : "mappingBulkDelete",
        "requestBody" : {
          "description" : "The id of the mapping",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "mappings deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          },
          "404" : {
            "description" : "mappings not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/mappings/{mapping-id}" : {
      "get" : {
        "tags" : [ "Mapping" ],
        "description" : "Returns a mapping",
        "operationId" : "mappingFindPendingById",
        "parameters" : [ {
          "name" : "mapping-id",
          "in" : "path",
          "description" : "The id of the mapping to retrieve",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "mappings returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InventoryMapping"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "mapping not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Mapping" ],
        "description" : "Deletes a mapping and cancels the purchase line it's associated with",
        "operationId" : "mappingDelete",
        "parameters" : [ {
          "name" : "mapping-id",
          "in" : "path",
          "description" : "The id of the mapping",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "mapping deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          },
          "404" : {
            "description" : "mapping not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/mappings" : {
      "get" : {
        "tags" : [ "Mapping" ],
        "description" : "Gets all pending mappings",
        "operationId" : "mappingGetPendingByAccount",
        "parameters" : [ {
          "name" : "purchaseId",
          "in" : "query",
          "description" : "Purchase Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "externalRef",
          "in" : "query",
          "description" : "External reference search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Event search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "Event date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "Event date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "mappingDateFrom",
          "in" : "query",
          "description" : "Mapping date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "mappingDateTo",
          "in" : "query",
          "description" : "Mapping date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "mappings returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/InventoryMappingSummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/mappings/{mapping-id}/resend" : {
      "get" : {
        "tags" : [ "Mapping" ],
        "description" : "Re-sends a mapping to the mapping queue. Returns the mapping id",
        "operationId" : "mappingResendMappingRequest",
        "parameters" : [ {
          "name" : "mapping-id",
          "in" : "path",
          "description" : "The id of the mapping",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "mapping re-sent successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          },
          "404" : {
            "description" : "mapping not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/pricing_group" : {
      "post" : {
        "tags" : [ "Pricing Group" ],
        "description" : "Inserts a new pricing group record",
        "operationId" : "pricingGroupInsertPricingGroup",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PricingGroup"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tag inserted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/notes" : {
      "post" : {
        "tags" : [ "Purchases" ],
        "description" : "Adds a purchase note",
        "operationId" : "purchasesAddPurchaseNote",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Purchase note object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PurchaseNote"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "note added is returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PurchaseNote"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "purchase not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/actions/cancel-lines" : {
      "post" : {
        "tags" : [ "Purchases" ],
        "description" : "Cancels a list of purchase lines",
        "operationId" : "purchasesBulkCancelLines",
        "requestBody" : {
          "description" : "The list of purchase ids to cancel",
          "content" : {
            "application/json" : {
              "schema" : {
                "uniqueItems" : true,
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "purchase lines cancelled"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/tags/remove" : {
      "post" : {
        "tags" : [ "Purchases" ],
        "description" : "Deletes all tags from purchases with given ids",
        "operationId" : "purchasesBulkRemoveTags",
        "requestBody" : {
          "description" : "Purchase Ids",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/lines/{line-id}/cancel" : {
      "put" : {
        "tags" : [ "Purchases" ],
        "description" : "Cancels a purchase line",
        "operationId" : "purchasesCancelPurchaseLine",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "line-id",
          "in" : "path",
          "description" : "The line id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "purchase line cancelled"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/tags/actions/delete" : {
      "post" : {
        "tags" : [ "Purchases" ],
        "description" : "Deletes tags for a purchase",
        "operationId" : "purchasesDelete",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The purchase Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Tags to be removed from the purchase",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/airbill" : {
      "get" : {
        "tags" : [ "Purchases" ],
        "description" : "Retrieves a purchase's airbill",
        "operationId" : "purchasesGetAirbill",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "retrieves the purchase's airbill",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PurchaseNote"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "purchase not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}" : {
      "get" : {
        "tags" : [ "Purchases" ],
        "description" : "Retrieves a purchase by the purchase id",
        "operationId" : "purchasesGetPurchaseById",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "purchase returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Purchase"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "purchase not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Purchases" ],
        "description" : "Updates a purchase",
        "operationId" : "purchasesUpdatePurchase",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "A purchase object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Purchase"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "purchase updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Purchase"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/lines/{line-id}" : {
      "get" : {
        "tags" : [ "Purchases" ],
        "description" : "Gets a purchase line",
        "operationId" : "purchasesGetPurchaseLine",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "line-id",
          "in" : "path",
          "description" : "The line id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "purchase line returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Line"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Purchases" ],
        "description" : "Updates a purchase line. Only amount and description can be updated.",
        "operationId" : "purchasesUpdatePurchaseLine",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "line-id",
          "in" : "path",
          "description" : "The line id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "A purchase line object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Line"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "purchase line updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Line"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          },
          "404" : {
            "description" : "line not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/lines/{line-id}/tickets" : {
      "get" : {
        "tags" : [ "Purchases" ],
        "description" : "Gets the tickets of a purchase line",
        "operationId" : "purchasesGetPurchaseLineTickets",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "line-id",
          "in" : "path",
          "description" : "The line id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "tickets of the purchase line returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Ticket"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/lines" : {
      "get" : {
        "tags" : [ "Purchases" ],
        "description" : "Gets purchase lines",
        "operationId" : "purchasesGetPurchaseLines",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "purchase lines returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Line"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Purchases" ],
        "description" : "Adds a purchase line",
        "operationId" : "purchasesInsertPurchaseLine",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "The purchase line to add.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Line"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "line added successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Line"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases" : {
      "get" : {
        "tags" : [ "Purchases" ],
        "description" : "Searches purchases",
        "operationId" : "purchasesSearch",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "deliveryMethod",
          "in" : "query",
          "description" : "Delivery method search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "COURIER", "EMAIL", "USPS", "UPS", "FEDEX", "WILLCALL", "PAPERLESS", "MEETANDGREET", "FLASHSEATS", "MOBILE_DELIVERY", "OFFICE_PICKUP", "OTHER" ]
            }
          }
        }, {
          "name" : "paymentMethod",
          "in" : "query",
          "description" : "Payment method search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
            }
          }
        }, {
          "name" : "vendorType",
          "in" : "query",
          "description" : "Vendor type search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "MARKETPLACE", "PRIMARY", "PERFORMER", "BROKER", "INDY", "MEMBER" ]
            }
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "tagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiTag",
          "in" : "query",
          "description" : "Tags to exclude",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "antiTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "vendorTag",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "vendorTagsMatchAll",
          "in" : "query",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "vendorId",
          "in" : "query",
          "description" : "Vendor Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "displayName",
          "in" : "query",
          "description" : "Vendor display name search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Purchase Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "inventoryId",
          "in" : "query",
          "description" : "Inventory Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "invoiceLineId",
          "in" : "query",
          "description" : "Invoice line Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "creditCardId",
          "in" : "query",
          "description" : "Invoice line Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "createdDateFrom",
          "in" : "query",
          "description" : "Purchase creation date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdDateTo",
          "in" : "query",
          "description" : "Purchase creation date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "lastUpdateFrom",
          "in" : "query",
          "description" : "Purchase last update date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "lastUpdateTo",
          "in" : "query",
          "description" : "Purchase last update date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "externalRef",
          "in" : "query",
          "description" : "External reference search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "simplifiedExternalRef",
          "in" : "query",
          "description" : "Simplified external reference (ignoring dashes, slashes or spaces) search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "paymentStatus",
          "in" : "query",
          "description" : "Payment status search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
            }
          }
        }, {
          "name" : "purchaseStatus",
          "in" : "query",
          "description" : "Purchase status search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CONTACT_NEEDED", "COMPLETED", "DELIVERY_FAILURE", "EVENT_CANCELLED", "EVENT_RESCHEDULED", "INVESTIGATION_CLOSED", "INVESTIGATION_CLOSED_BUYER_FAVOR", "INVESTIGATION_CLOSED_SELLER_FAVOR", "INVESTIGATION_PENDING", "MANAGER_REVIEW", "ORDER_PARTIALLY_VOID_CANCELLED", "ORDER_VOID_CANCELLED", "WAITING_FOR_RESPONSE" ]
            }
          }
        }, {
          "name" : "minCost",
          "in" : "query",
          "description" : "Minimum cost search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "maxCost",
          "in" : "query",
          "description" : "Maximum cost search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "currencyCode",
          "in" : "query",
          "description" : "Currency type search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          }
        }, {
          "name" : "internalId",
          "in" : "query",
          "description" : "Internal Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "ID", "CREATED_DATE", "DISPLAY_NAME", "PAYMENT_METHOD", "DELIVERY_METHOD", "QUANTITY", "SECTION", "ROW", "TOTAL", "LINE_COUNT", "LINE_TOTAL", "PAYMENT_STATUS", "PURCHASE_STATUS", "EXTERNAL_REF", "OUTSTANDING_BALANCE", "EVENT_NAME" ]
          }
        }, {
          "name" : "includeHasZoneSeatingInventory",
          "in" : "query",
          "description" : "Whether the results should include inventory zone seating",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "zeroOutstandingBalance",
          "in" : "query",
          "description" : "Whether the results should have zero outstanding balance",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minOutstandingBalance",
          "in" : "query",
          "description" : "Minimum outstanding balance search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "maxOutstandingBalance",
          "in" : "query",
          "description" : "Maximum outstanding balance search filter",
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "consignment",
          "in" : "query",
          "description" : "Whether the results have a consignment type POs",
          "schema" : {
            "type" : "string",
            "enum" : [ "YES", "NO", "COMPLETED" ]
          }
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Event Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "eventName",
          "in" : "query",
          "description" : "Event Name search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cooperative",
          "in" : "query",
          "description" : "Whether the results have cooperative POs",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "createdBy",
          "in" : "query",
          "description" : "User email for purchase creator",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "createdByUserId",
          "in" : "query",
          "description" : "User id for purchase creator",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "lastPurchasePaymentNote",
          "in" : "query",
          "description" : "Last purchase payment note search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vendorTags",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "purchases returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PurchaseSummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Purchases" ],
        "description" : "Creates a purchase. The minimum required field to insert a purchase is the vendorId. Inventory purchase lines must include quantity, section, row, cost, lowSeat, highSeat, stockType,  seatType and either an eventId or eventMapping.",
        "operationId" : "purchasesInsertPurchase",
        "requestBody" : {
          "description" : "A purchase object to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Purchase"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "purchase created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Purchase"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/inventory" : {
      "post" : {
        "tags" : [ "Purchases" ],
        "description" : "Creates inventory",
        "operationId" : "purchasesMultiWithPurchaseId",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The purchase order id on which to attach the tickets",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Array of inventory objects to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Inventory"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "inventory order created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Inventory"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/print" : {
      "get" : {
        "tags" : [ "Purchases" ],
        "description" : "Prints a Purchase Order",
        "operationId" : "purchasesPrint",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "timeZoneOffset",
          "in" : "query",
          "description" : "Time zone off set",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Purchase Order sent"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/tags/{tag}" : {
      "delete" : {
        "tags" : [ "Purchases" ],
        "description" : "Deletes a tag for a purchase",
        "operationId" : "purchasesRemoveTag",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "tag",
          "in" : "path",
          "description" : "Tag to be removed from the purchase",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "tag deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "deprecated" : true,
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/lines/{line-id}/actions/replace" : {
      "post" : {
        "tags" : [ "Purchases" ],
        "description" : "Replaces a purchase line. Allows changing section, row, low seat and seat type.",
        "operationId" : "purchasesReplacePurchaseLine",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "line-id",
          "in" : "path",
          "description" : "The line id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PurchaseLineReplaceAction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "purchase line replaced",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Line"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/auto-purchases" : {
      "get" : {
        "tags" : [ "Purchases" ],
        "description" : "Searches auto purchases",
        "operationId" : "purchasesSearchAutoPurchases",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "eventId",
          "in" : "query",
          "description" : "Event Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "purchaseId",
          "in" : "query",
          "description" : "Purchase Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "User email search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "User id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "externalRef",
          "in" : "query",
          "description" : "External reference search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fromPurchaseDate",
          "in" : "query",
          "description" : "Purchase date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "toPurchaseDate",
          "in" : "query",
          "description" : "Purchase date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventName",
          "in" : "query",
          "description" : "Event name search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ticketStatus",
          "in" : "query",
          "description" : "Ticket Status search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "SOLD", "ERROR", "CANCELLED" ]
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "ID", "CREATED_DATE", "EXTERNAL_REF", "PAYMENT_STATUS", "PURCHASE_DATE", "EVENT_NAME", "EVENT_DATE", "ROW", "SECTION", "UNIT_COST", "SEATS", "QUANTITY", "LINE_TOTAL", "USER", "VENUE_NAME", "GROUP_COST" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "auto purchases returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PurchaseSummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/send" : {
      "get" : {
        "tags" : [ "Purchases" ],
        "description" : "Sends a Purchase Order to the vendor's email address",
        "operationId" : "purchasesSend",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "Id of the purchase",
          "required" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "emailAddress",
          "in" : "query",
          "description" : "The vendor's email addresses in the To email field",
          "required" : true,
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "ccEmailAddress",
          "in" : "query",
          "description" : "The vendor's email addresses in the Cc email field",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "bccEmailAddress",
          "in" : "query",
          "description" : "The vendor's email addresses in the Bcc email field",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "subject",
          "in" : "query",
          "description" : "Subject of the email",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "message",
          "in" : "query",
          "description" : "Message of the email",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeAirbill",
          "in" : "query",
          "description" : "Whether the email includes the airbill PDF attached",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "timeZoneOffset",
          "in" : "query",
          "description" : "Time zone off set",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Purchase Order sent"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/tags" : {
      "post" : {
        "tags" : [ "Purchases" ],
        "description" : "Inserts a new tags for a purchase. Duplicates are ignored.",
        "operationId" : "purchasesTag",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Tags to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tag inserted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/bulk" : {
      "put" : {
        "tags" : [ "Purchases" ],
        "description" : "Bulk Purchase Update",
        "operationId" : "purchasesUpdate",
        "requestBody" : {
          "description" : "Bulk purchase update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPurchaseUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "Invalid fields (See Json response in javax.validation.Validator format)"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/actions/update-purchase-currency" : {
      "put" : {
        "tags" : [ "Purchases" ],
        "description" : "Converts purchases currency using an exchange rate",
        "operationId" : "purchasesUpdateCurrency",
        "requestBody" : {
          "description" : "Payload for bulk action",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CurrencyUpdateBulkAction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "currency successfully updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/purchases/{purchase-id}/lines/{line-id}/inventory" : {
      "post" : {
        "tags" : [ "Purchases" ],
        "description" : "Updates section and row for a purchase line",
        "operationId" : "purchasesUpdatePurchaseInventory",
        "parameters" : [ {
          "name" : "purchase-id",
          "in" : "path",
          "description" : "The id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "line-id",
          "in" : "path",
          "description" : "The line id of the purchase",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePurchaseInventoryRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "update successful"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/quick-report/purchases" : {
      "get" : {
        "tags" : [ "Quick Reports" ],
        "description" : "Retrieves the purchases quick report",
        "operationId" : "quickReportsGetPurchases",
        "parameters" : [ {
          "name" : "purchaseDateFrom",
          "in" : "query",
          "description" : "Purchase date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "purchaseDateTo",
          "in" : "query",
          "description" : "Purchase date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "categoryId",
          "in" : "query",
          "description" : "Category Id search filter",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Event to filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "From event date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "To event date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "paymentStatus",
          "in" : "query",
          "description" : "Payment status search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
          }
        }, {
          "name" : "inventoryTag",
          "in" : "query",
          "description" : "Inventory tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "inventoryTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all inventory tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "inventoryTags",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Sales report",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "data not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/quick-report/sales" : {
      "get" : {
        "tags" : [ "Quick Reports" ],
        "description" : "Retrieves the sales quick report",
        "operationId" : "quickReportsGetSales",
        "parameters" : [ {
          "name" : "invoiceDateFrom",
          "in" : "query",
          "description" : "Invoice date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "invoiceDateTo",
          "in" : "query",
          "description" : "Invoice date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "categoryId",
          "in" : "query",
          "description" : "Category Id search filter",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Event to filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "venue",
          "in" : "query",
          "description" : "Venue filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventDateFrom",
          "in" : "query",
          "description" : "From event date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventDateTo",
          "in" : "query",
          "description" : "To event date filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "fulfillmentStatus",
          "in" : "query",
          "description" : "Fulfillment status search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "PENDING", "COMPLETE" ]
          }
        }, {
          "name" : "paymentStatus",
          "in" : "query",
          "description" : "Payment status search filter",
          "schema" : {
            "type" : "string",
            "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
          }
        }, {
          "name" : "inventoryTag",
          "in" : "query",
          "description" : "Inventory tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "inventoryTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all inventory tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "inventoryTags",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Sales report",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "data not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/quicksearch" : {
      "get" : {
        "tags" : [ "Quick Search" ],
        "description" : "Searches by the passed criteria",
        "operationId" : "quickSearchSearch",
        "parameters" : [ {
          "name" : "key",
          "in" : "query",
          "description" : "Key value to search",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "results returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QuickSearchResult"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/reports/snapshots/{id}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "description" : "Retrieves a snapshot by the snapshot id",
        "operationId" : "reportsGetReportSnapshot",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the snapshot",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Snapshot returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportSnapshotResult"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "Snapshots not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/reports/snapshots" : {
      "get" : {
        "tags" : [ "Reports" ],
        "description" : "Searches snapshots",
        "operationId" : "reportsQueryReportSnapshots",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "query",
          "description" : "Report Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "snapshotDateFrom",
          "in" : "query",
          "description" : "Snapshot creation date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "snapshotDateTo",
          "in" : "query",
          "description" : "Snapshot creation date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Snapshots returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReportSnapshot"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/research-dashboard/past-events/events" : {
      "get" : {
        "tags" : [ "Research dashboard" ],
        "description" : "Retrieves the past profitable events for a performer and/or venue",
        "operationId" : "researchdashboardGetEventProfitability",
        "parameters" : [ {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Past profitable events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventProfitability"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "data not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/research-dashboard/events-profitability" : {
      "get" : {
        "tags" : [ "Research dashboard" ],
        "description" : "Retrieves the events profitability for a performer and/or venue",
        "operationId" : "researchdashboardGetEventsProfitability",
        "parameters" : [ {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Profitable events",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "data not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/research-dashboard/lifetime-pl" : {
      "get" : {
        "tags" : [ "Research dashboard" ],
        "description" : "Retrieves the lifetime P/L for a performer and/or venue",
        "operationId" : "researchdashboardGetLifetimePL",
        "parameters" : [ {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lifetime P/L",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "data not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/research-dashboard/past-events/performers" : {
      "get" : {
        "tags" : [ "Research dashboard" ],
        "description" : "Retrieves the past profitable performers for a performer and/or venue",
        "operationId" : "researchdashboardGetPerformerProfitability",
        "parameters" : [ {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Past profitable performers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PerformerProfitability"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "data not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/research-dashboard/seat-map-heat-map" : {
      "get" : {
        "tags" : [ "Research dashboard" ],
        "description" : "Retrieves profitable sections and groups for a performer and venue",
        "operationId" : "researchdashboardGetSeatMapHeatMap",
        "parameters" : [ {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Past profitable sections",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/HeatMapSeatMapResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "data not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/research-dashboard/past-events/sections" : {
      "get" : {
        "tags" : [ "Research dashboard" ],
        "description" : "Retrieves the past profitable sections for a performer and/or venue",
        "operationId" : "researchdashboardGetSectionProfitability",
        "parameters" : [ {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Past profitable sections and groups",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SectionProfitability"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "data not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/research-dashboard/tickets-profitability" : {
      "get" : {
        "tags" : [ "Research dashboard" ],
        "description" : "Retrieves the tickets profitability for a performer and/or venue",
        "operationId" : "researchdashboardGetTicketsProfitability",
        "parameters" : [ {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Profitable tickets",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "data not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/research-dashboard/tickets-sales" : {
      "get" : {
        "tags" : [ "Research dashboard" ],
        "description" : "Retrieves the tickets sales occurring for a performer and/or venue",
        "operationId" : "researchdashboardGetTicketsSales",
        "parameters" : [ {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results to return",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "PROFIT", "SALES", "RECENT" ]
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "events",
          "in" : "query",
          "description" : "Set of event ids to search for - results might be returned in alphabetical order",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Tickets sales",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TicketSales"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "data not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/research-dashboard/past-events/venues" : {
      "get" : {
        "tags" : [ "Research dashboard" ],
        "description" : "Retrieves the past profitable venues for a performer and/or venue",
        "operationId" : "researchdashboardGetVenueProfitability",
        "parameters" : [ {
          "name" : "performerId",
          "in" : "query",
          "description" : "Performer Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "venueId",
          "in" : "query",
          "description" : "Venue Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Past profitable venues",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VenueProfitability"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "data not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/tags/bulk" : {
      "put" : {
        "tags" : [ "Tags" ],
        "description" : "Bulk add/remove tags",
        "operationId" : "tagsBulk",
        "requestBody" : {
          "description" : "Update payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkTagRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tag deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TagSummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/tags/actions/delete" : {
      "post" : {
        "tags" : [ "Tags" ],
        "description" : "Deletes tags for an account",
        "operationId" : "tagsDelete",
        "requestBody" : {
          "description" : "Tags to remove",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/tags/filtered" : {
      "get" : {
        "tags" : [ "Tags" ],
        "description" : "Retrieves a list of tags for an account",
        "operationId" : "tagsGetFilteredTags",
        "parameters" : [ {
          "name" : "tag",
          "in" : "query",
          "description" : "Key value to search",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/tags" : {
      "get" : {
        "tags" : [ "Tags" ],
        "description" : "Retrieves a list of tags for an account",
        "operationId" : "tagsList",
        "responses" : {
          "200" : {
            "description" : "list returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/tags/summary" : {
      "get" : {
        "tags" : [ "Tags" ],
        "description" : "Tags summary",
        "operationId" : "tagsTagsSummary",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Tag Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Tag name",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "tag summary returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TagSummary"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/tags/color" : {
      "put" : {
        "tags" : [ "Tags" ],
        "description" : "Set color used to render a tag in the user interface",
        "operationId" : "tagsUpdateColor",
        "requestBody" : {
          "description" : "Update payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagColorUpdateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tag color updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/tickets/{ticket-id}" : {
      "get" : {
        "tags" : [ "Tickets" ],
        "description" : "Retrieves a ticket by id",
        "operationId" : "ticketsGetById",
        "parameters" : [ {
          "name" : "ticket-id",
          "in" : "path",
          "description" : "The ticket id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ticket returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticket"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "ticket not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/tickets" : {
      "get" : {
        "tags" : [ "Tickets" ],
        "description" : "Searches a ticket with the given barcode",
        "operationId" : "ticketsSearch",
        "parameters" : [ {
          "name" : "barcode",
          "in" : "query",
          "description" : "Ticket barcode to look for",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lastUpdateFrom",
          "in" : "query",
          "description" : "Ticket last update date from range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "lastUpdateTo",
          "in" : "query",
          "description" : "Ticket last update date to range filter",
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "eventId",
          "in" : "query",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "section",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "row",
          "in" : "query",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "seatNumber",
          "in" : "query",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }, {
          "name" : "ticketIds",
          "in" : "query",
          "description" : "Ticket ids search filter",
          "schema" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "tickets returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Ticket"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/users/me" : {
      "get" : {
        "tags" : [ "Users" ],
        "description" : "Gets the current user details",
        "operationId" : "usersGetMe",
        "responses" : {
          "200" : {
            "description" : "user returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "description" : "Gets a list of users",
        "operationId" : "usersListUsers",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "company",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "email",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "permissions",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "EDIT_PRICE", "VIEW_EDIT_COST", "ADD_EDIT_INVOICE_PO_PAYMENT", "ACCESS_SALES_TAB", "ACCESS_CUSTOMERS_LIST", "CREATE_INVOICE", "EDIT_INVOICE_PO_COST", "REMOVE_TICKETS_FROM_INVOICE", "ACCESS_PURCHASES_TAB", "ACCESS_VENDORS_LIST", "VIEW_EDIT_CONSIGNMENT_CO_OP", "ADD_INVENTORY", "BROADCAST_UNBROADCAST_INVENTORY", "VIEW_EDIT_ZONE_STATUS", "CANCEL_REPLACE_INVENTORY", "ACCESS_REPORTS", "ACCESS_TICKER", "ACCESS_RESEARCH_DASHBOARD", "ACCESS_SHIPPING", "EDIT_ACCOUNT_LEVEL_DETAILS", "VIEW_EDIT_USER", "VIEW_EDIT_PDF_BARCODE", "EDIT_TAG", "ADMIN", "UPS_ADMIN", "SFS_ADMIN", "USER", "ACCOUNT_ADMIN", "ACCOUNT_OWNER", "ANALYST", "BASIC_USER", "LIMITED_USER", "PERFORMER_ANALYST", "TAGS_LOCKED", "VIEW_ONLY", "LIMITED_PRICER", "ACCOUNTING_RESTRICTION", "VIEW_INVENTORY", "VIEW_INVENTORY_HISTORY", "EDIT_INVENTORY", "SAVED_SEARCHES", "VIEW_EVENT_DELTA", "DELETE_EVENT_DELTA", "VIEW_ADDRESS", "VIEW_NOTIFICATIONS", "MANAGE_CUSTOMER_CREDIT", "VSFS_ADMIN", "SKYBOX_ADMIN", "SKYBOX_DEV", "ACCOUNTING_ADMIN", "PRICING_ADMIN", "SKYBOX_DRIVE_ADMIN", "SKYBOX_DRIVE_USER" ]
            }
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "CREATED", "EMAIL", "FIRST_NAME", "ID", "LAST_ACTIVITY", "LAST_NAME", "STATUS", "UPDATED" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "users returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/vendors/tags/remove" : {
      "post" : {
        "tags" : [ "Vendors" ],
        "description" : "Deletes all tags from vendors with given ids",
        "operationId" : "vendorsBulkRemoveTags",
        "requestBody" : {
          "description" : "Vendor Ids",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/vendors/bulk" : {
      "put" : {
        "tags" : [ "Vendors" ],
        "description" : "Bulk Vendor Update",
        "operationId" : "vendorsBulkUpdate",
        "requestBody" : {
          "description" : "Bulk vendor update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkVendorUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "Invalid fields (See Json response in javax.validation.Validator format)"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/vendors/{vendor-id}/tags/actions/delete" : {
      "post" : {
        "tags" : [ "Vendors" ],
        "description" : "Deletes tags for a vendor",
        "operationId" : "vendorsDelete",
        "parameters" : [ {
          "name" : "vendor-id",
          "in" : "path",
          "description" : "The vendor Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Tags to be removed from the vendor",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tags deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/vendors/{vendor-id}" : {
      "get" : {
        "tags" : [ "Vendors" ],
        "description" : "Retrieves a vendor by the vendor id",
        "operationId" : "vendorsGetById",
        "parameters" : [ {
          "name" : "vendor-id",
          "in" : "path",
          "description" : "The id of the vendor",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "vendor returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Vendor"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "vendor not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Vendors" ],
        "description" : "Updates a vendor",
        "operationId" : "vendorsUpdate",
        "parameters" : [ {
          "name" : "vendor-id",
          "in" : "path",
          "description" : "The id of the vendor",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "The vendor object to update.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Vendor"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "vendor updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Vendor"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/vendors/default" : {
      "get" : {
        "tags" : [ "Vendors" ],
        "description" : "Retrieves the default vendor for the account",
        "operationId" : "vendorsGetDefault",
        "responses" : {
          "200" : {
            "description" : "default vendor returned"
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "default vendor not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Vendors" ],
        "description" : "Sets the default vendor for the account",
        "operationId" : "vendorsUpdateDefaultVendor",
        "requestBody" : {
          "description" : "The vendor id of the default vendor",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "default vendor updated"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/vendors" : {
      "get" : {
        "tags" : [ "Vendors" ],
        "description" : "Retrieves all vendors",
        "operationId" : "vendorsSearch",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Vendor Id search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "vendorType",
          "in" : "query",
          "description" : "Vendor type search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "MARKETPLACE", "PRIMARY", "PERFORMER", "BROKER", "INDY", "MEMBER" ]
            }
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Tags to include",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "tagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "antiTag",
          "in" : "query",
          "description" : "Tags to exclude",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "antiTagsMatchAll",
          "in" : "query",
          "description" : "Whether the results should not have all the tags or only some",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "displayName",
          "in" : "query",
          "description" : "Vendor display name search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "email",
          "in" : "query",
          "description" : "Email search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lastName",
          "in" : "query",
          "description" : "Last name search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "company",
          "in" : "query",
          "description" : "Company search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "City search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "country",
          "in" : "query",
          "description" : "Country search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "phone",
          "in" : "query",
          "description" : "Phone number to search by (matching phone 1 and phone 2 fields)",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "DISPLAY_NAME", "VENDOR_TYPE", "EMAIL", "LAST_NAME", "COMPANY", "CITY", "STATE", "ACCOUNT_DEFAULT" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "vendors returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Vendor"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Vendors" ],
        "description" : "Creates vendors",
        "operationId" : "vendorsInsert",
        "requestBody" : {
          "description" : "A vendor object to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Vendor"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "vendor created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Vendor"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/vendors/{vendor-id}/tags" : {
      "post" : {
        "tags" : [ "Vendors" ],
        "description" : "Inserts a new tags for a vendor. Duplicates are ignored",
        "operationId" : "vendorsTag",
        "parameters" : [ {
          "name" : "vendor-id",
          "in" : "path",
          "description" : "The id of the vendor",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Tags to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TagRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "tag inserted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/venues/{venue-id}" : {
      "get" : {
        "tags" : [ "Venues" ],
        "description" : "Retrieves a venue by the venue id",
        "operationId" : "venuesGetById",
        "parameters" : [ {
          "name" : "venue-id",
          "in" : "path",
          "description" : "The id of the venue",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "venue returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Venue"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "venue not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/venues" : {
      "get" : {
        "tags" : [ "Venues" ],
        "description" : "Searches venues",
        "operationId" : "venuesSearch",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of results per page",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Direction to sort",
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "Page number of results to show",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Venue name search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "city",
          "in" : "query",
          "description" : "City search filter",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State search filter",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Venue Id search filter",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "sortedBy",
          "in" : "query",
          "description" : "Field to sort by",
          "schema" : {
            "type" : "string",
            "enum" : [ "NAME", "ID", "CITY", "STATE" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "venues returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Venue"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/webhooks" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "description" : "Get all Webhooks created",
        "operationId" : "webhooksQuery",
        "responses" : {
          "200" : {
            "description" : "Webhooks returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SkyboxWebhook"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Webhooks" ],
        "description" : "Create Webhook",
        "operationId" : "webhooksCreate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SkyboxWebhook"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Webhook created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SkyboxWebhook"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    },
    "/webhooks/{id}" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "description" : "Get Webhook",
        "operationId" : "webhooksFind",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SkyboxWebhook"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "404" : {
            "description" : "Webhook not found"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Webhooks" ],
        "description" : "Update Webhook",
        "operationId" : "webhooksUpdate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SkyboxWebhook"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Webhook updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SkyboxWebhook"
                }
              }
            }
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Webhooks" ],
        "description" : "Delete Webhook",
        "operationId" : "webhooksDelete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Webhook deleted"
          },
          "401" : {
            "description" : "not authorized"
          },
          "400" : {
            "description" : "invalid request"
          }
        },
        "security" : [ {
          "Application Token" : [ ]
        }, {
          "Authorization Token" : [ ]
        }, {
          "Account" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Account" : {
        "required" : [ "address1", "address2", "city", "company", "country", "email", "firstName", "lastName", "logo", "phone", "postalCode", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "the account id (ignored by API)",
            "format" : "int64"
          },
          "company" : {
            "type" : "string",
            "description" : "the company name"
          },
          "email" : {
            "type" : "string",
            "description" : "the account contact email address"
          },
          "firstName" : {
            "type" : "string",
            "description" : "account contact's first name"
          },
          "lastName" : {
            "type" : "string",
            "description" : "account contact's last name"
          },
          "phone" : {
            "type" : "string",
            "description" : "account contact's phone number"
          },
          "externalMerchantId" : {
            "type" : "string",
            "description" : "account external merchant id"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "address1" : {
            "type" : "string",
            "description" : "the company's 1st address line"
          },
          "address2" : {
            "type" : "string",
            "description" : "the company's 2nd address line"
          },
          "city" : {
            "type" : "string",
            "description" : "the company's city"
          },
          "state" : {
            "type" : "string",
            "description" : "the company's state",
            "enum" : [ "AL", "AK", "AS", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "GU", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "MP", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VI", "VA", "WA", "WV", "WI", "WY", "AB", "BC", "MB", "NB", "NL", "NS", "ON", "PE", "QC", "SK", "NT", "NU", "YT", "OTHER", "UNKNOWN" ]
          },
          "postalCode" : {
            "type" : "string",
            "description" : "the company's postal code"
          },
          "country" : {
            "type" : "string",
            "description" : "the company's country",
            "enum" : [ "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW" ]
          },
          "logo" : {
            "type" : "string",
            "description" : "the company logo"
          },
          "nativeIntegrationEnabled" : {
            "type" : "boolean"
          },
          "optInStf" : {
            "type" : "boolean"
          },
          "accounting" : {
            "type" : "boolean"
          },
          "deleteCancelledTickets" : {
            "type" : "boolean"
          },
          "accountSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AccountSetting"
            }
          },
          "taxCostOptIn" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TaxedCostMarketplaceOptIn"
            }
          },
          "optInNonIntegrated" : {
            "type" : "boolean"
          }
        }
      },
      "AccountSetting" : {
        "required" : [ "settingName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "settingName" : {
            "type" : "string",
            "enum" : [ "PRINT_INTERNAL_IDS", "PRINT_PAYMENTS", "PRINT_STOCK_TYPE", "PRINT_CREATED_BY", "PRINT_INVENTORY_TAGS_INVOICE", "PRINT_PURCHASE_TAGS_PURCHASE", "PRINT_AIRBILL_INVOICE", "PRINT_DISCLOSURES_ATTRIBUTES_INVOICE", "PRINT_INTERNAL_NOTES_INVOICE", "PRINT_IN_HAND_DATE", "PRINT_OLD_FORMAT", "AUTO_DELIVERY_ENABLED", "OUT_FULFILLMENT_STATUS_CHECK", "TAGS_REQUIRED", "ALLOW_COOPERATIVE_INVENTORY", "DISABLE_BARCODE_SCRAPING", "HIDE_DYNAMIC_FILTERS_TOGGLE", "MY_AUTOMATOR", "TAG_COLORS" ]
          },
          "value" : {
            "type" : "object"
          }
        }
      },
      "TaxedCostMarketplaceOptIn" : {
        "type" : "object",
        "properties" : {
          "marketplace" : {
            "type" : "string",
            "enum" : [ "VIVID_SEATS", "STUBHUB", "TICKET_NETWORK", "EVENT_INVENTORY", "FANXCHANGE", "GAMETIME", "SEATGEEK", "TICKET_EVOLUTION", "TICKPICK", "VIAGOGO", "TICKET_CITY", "RAZORGATOR", "SCOREBIG", "OTHER" ]
          },
          "optIn" : {
            "type" : "boolean"
          }
        }
      },
      "Notification" : {
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "extra" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "MESSAGE", "RELEASE", "MAPPING_QUEUE", "UPCOMING_OPEN_ORDERS", "EVENT_DELTA" ]
          },
          "alertId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "Address" : {
        "required" : [ "address1", "city", "country", "phone1", "postalCode", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "firstName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "lastName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "company" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "address1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "address2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string"
          },
          "city" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "AL", "AK", "AS", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "GU", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "MP", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VI", "VA", "WA", "WV", "WI", "WY", "AB", "BC", "MB", "NB", "NL", "NS", "ON", "PE", "QC", "SK", "NT", "NU", "YT", "OTHER", "UNKNOWN" ]
          },
          "postalCode" : {
            "maxLength" : 45,
            "minLength" : 1,
            "type" : "string"
          },
          "country" : {
            "maxLength" : 45,
            "minLength" : 1,
            "type" : "string"
          },
          "phone1" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "phone2" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "fax" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          }
        }
      },
      "Alert" : {
        "required" : [ "alertType", "message", "subject" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "creatorId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "subject" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "alertType" : {
            "type" : "string",
            "enum" : [ "MESSAGE", "RELEASE" ]
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "acknowledged" : {
            "type" : "boolean"
          },
          "senderName" : {
            "type" : "string"
          },
          "senderEmail" : {
            "type" : "string"
          },
          "releaseAlertId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "PdfDetails" : {
        "type" : "object",
        "properties" : {
          "pageNumber" : {
            "type" : "integer",
            "description" : "the page number within the original PDF",
            "format" : "int32"
          },
          "pdfUrl" : {
            "type" : "string",
            "description" : "the url for the individual pdf page"
          }
        }
      },
      "PdfUpload" : {
        "type" : "object",
        "properties" : {
          "pdf" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "byte"
            }
          }
        }
      },
      "CreditCard" : {
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string"
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/BillingAddress"
          },
          "cardholderName" : {
            "type" : "string"
          },
          "defaultCard" : {
            "type" : "boolean"
          }
        }
      },
      "CustomerCard" : {
        "required" : [ "addressExternalId", "cardType", "customerExternalId", "externalId", "lastFourDigits" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cardType" : {
            "type" : "string",
            "enum" : [ "AMEX", "DISCOVER", "MASTERCARD", "UNKNOWN", "VISA" ]
          },
          "lastFourDigits" : {
            "type" : "integer",
            "format" : "int32"
          },
          "externalId" : {
            "type" : "string"
          },
          "customerExternalId" : {
            "type" : "string"
          },
          "addressExternalId" : {
            "type" : "string"
          },
          "cardholderName" : {
            "type" : "string"
          },
          "expirationMonth" : {
            "type" : "integer",
            "format" : "int32"
          },
          "expirationYear" : {
            "type" : "integer",
            "format" : "int32"
          },
          "customerId" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "defaultCard" : {
            "type" : "boolean"
          },
          "lastDateUsed" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "CreditCardGroup" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "accountId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string",
            "description" : "The label of the credit card group."
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the credit card group."
          },
          "creditCards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreditCard"
            }
          }
        }
      },
      "BillingAddress" : {
        "type" : "object",
        "properties" : {
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "address1" : {
            "type" : "string"
          },
          "address2" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "AL", "AK", "AS", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "GU", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "MP", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VI", "VA", "WA", "WV", "WI", "WY", "AB", "BC", "MB", "NB", "NL", "NS", "ON", "PE", "QC", "SK", "NT", "NU", "YT", "OTHER", "UNKNOWN" ]
          },
          "postalCode" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "persistInVault" : {
            "type" : "boolean"
          }
        }
      },
      "BulkCustomerUpdate" : {
        "required" : [ "customerIds" ],
        "type" : "object",
        "properties" : {
          "customerIds" : {
            "type" : "array",
            "description" : "Customer id's which will be updated.",
            "items" : {
              "type" : "integer",
              "description" : "Customer id's which will be updated.",
              "format" : "int64"
            }
          },
          "paymentMethod" : {
            "type" : "string",
            "description" : "Payment method to update.",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          },
          "customerType" : {
            "type" : "string",
            "description" : "Customer type to update.",
            "enum" : [ "MARKETPLACE", "PERFORMER", "BROKER", "RETAIL", "CONCIERGE", "TRAVELAGENT", "MEMBER" ]
          }
        }
      },
      "TagRequest" : {
        "required" : [ "tag" ],
        "type" : "object",
        "properties" : {
          "tag" : {
            "type" : "string"
          }
        }
      },
      "Customer" : {
        "required" : [ "accountId", "address", "customerType", "defaultDeliveryMethod", "displayName", "email", "paymentMethod", "salesTerm" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastInvoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "email" : {
            "type" : "string"
          },
          "email2" : {
            "type" : "string"
          },
          "useEmail2" : {
            "type" : "boolean"
          },
          "company" : {
            "type" : "string"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "notes" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "outlawedPaymentMethods" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
            }
          },
          "displayName" : {
            "maxLength" : 100,
            "minLength" : 0,
            "type" : "string"
          },
          "customerType" : {
            "type" : "string",
            "enum" : [ "MARKETPLACE", "PERFORMER", "BROKER", "RETAIL", "CONCIERGE", "TRAVELAGENT", "MEMBER" ]
          },
          "salesTerm" : {
            "type" : "string",
            "enum" : [ "NET0", "NET10", "NET15", "NET25", "NET30", "NET45", "NET60" ]
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          },
          "arThreshold" : {
            "type" : "number"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "tags" : {
            "type" : "string"
          },
          "outstandingBalance" : {
            "type" : "number"
          },
          "defaultDeliveryMethod" : {
            "type" : "string",
            "description" : "The default delivery method to use on invoices.",
            "enum" : [ "COURIER", "EMAIL", "USPS", "UPS", "FEDEX", "WILLCALL", "PAPERLESS", "MEETANDGREET", "FLASHSEATS", "MOBILE_DELIVERY", "OFFICE_PICKUP", "OTHER" ]
          },
          "creditBalance" : {
            "type" : "number",
            "readOnly" : true
          }
        }
      },
      "DefaultCustomer" : {
        "required" : [ "marketplace" ],
        "type" : "object",
        "properties" : {
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customerId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "marketplace" : {
            "type" : "string",
            "enum" : [ "VIVID_SEATS", "STUBHUB", "TICKET_NETWORK", "EVENT_INVENTORY", "FANXCHANGE", "GAMETIME", "SEATGEEK", "TICKET_EVOLUTION", "TICKPICK", "VIAGOGO", "TICKET_CITY", "RAZORGATOR", "SCOREBIG", "OTHER" ]
          }
        }
      },
      "Category" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "eventType" : {
            "type" : "string",
            "enum" : [ "CONCERT", "THEATER", "SPORT", "OTHER" ]
          }
        }
      },
      "Event" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "venue" : {
            "$ref" : "#/components/schemas/Venue"
          },
          "performerId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "performer" : {
            "$ref" : "#/components/schemas/Performer"
          },
          "keywords" : {
            "type" : "string"
          },
          "chartUrl" : {
            "type" : "string"
          },
          "stubhubEventId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stubhubEventUrl" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "string"
          },
          "notes" : {
            "type" : "string"
          },
          "eiEventId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "optOutReplenishment" : {
            "type" : "boolean"
          },
          "ticketCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mySoldTickets" : {
            "type" : "integer",
            "format" : "int32"
          },
          "myCancelledTickets" : {
            "type" : "integer",
            "format" : "int32"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "vividSeatsEventUrl" : {
            "type" : "string"
          }
        }
      },
      "EventDelta" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "eventId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "name" : {
            "type" : "string"
          },
          "venueId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "changeDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/Event"
          },
          "venue" : {
            "$ref" : "#/components/schemas/Venue"
          }
        }
      },
      "Performer" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "eventType" : {
            "type" : "string",
            "enum" : [ "CONCERT", "THEATER", "SPORT", "OTHER" ]
          },
          "category" : {
            "$ref" : "#/components/schemas/Category"
          }
        }
      },
      "Venue" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "address" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "postalCode" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "timeZone" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "rules" : {
                "type" : "object",
                "properties" : {
                  "fixedOffset" : {
                    "type" : "boolean"
                  },
                  "transitions" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "offsetBefore" : {
                          "type" : "object",
                          "properties" : {
                            "totalSeconds" : {
                              "type" : "integer",
                              "format" : "int32"
                            },
                            "id" : {
                              "type" : "string"
                            }
                          }
                        },
                        "offsetAfter" : {
                          "type" : "object",
                          "properties" : {
                            "totalSeconds" : {
                              "type" : "integer",
                              "format" : "int32"
                            },
                            "id" : {
                              "type" : "string"
                            }
                          }
                        },
                        "instant" : {
                          "type" : "string",
                          "format" : "date-time"
                        },
                        "duration" : {
                          "type" : "object",
                          "properties" : {
                            "seconds" : {
                              "type" : "integer",
                              "format" : "int64"
                            },
                            "zero" : {
                              "type" : "boolean"
                            },
                            "nano" : {
                              "type" : "integer",
                              "format" : "int32"
                            },
                            "negative" : {
                              "type" : "boolean"
                            },
                            "units" : {
                              "type" : "array",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "durationEstimated" : {
                                    "type" : "boolean"
                                  },
                                  "timeBased" : {
                                    "type" : "boolean"
                                  },
                                  "dateBased" : {
                                    "type" : "boolean"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "gap" : {
                          "type" : "boolean"
                        },
                        "dateTimeAfter" : {
                          "type" : "string",
                          "format" : "date-time"
                        },
                        "dateTimeBefore" : {
                          "type" : "string",
                          "format" : "date-time"
                        },
                        "overlap" : {
                          "type" : "boolean"
                        }
                      }
                    }
                  },
                  "transitionRules" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "month" : {
                          "type" : "string",
                          "enum" : [ "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER" ]
                        },
                        "timeDefinition" : {
                          "type" : "string",
                          "enum" : [ "UTC", "WALL", "STANDARD" ]
                        },
                        "standardOffset" : {
                          "type" : "object",
                          "properties" : {
                            "totalSeconds" : {
                              "type" : "integer",
                              "format" : "int32"
                            },
                            "id" : {
                              "type" : "string"
                            }
                          }
                        },
                        "offsetBefore" : {
                          "type" : "object",
                          "properties" : {
                            "totalSeconds" : {
                              "type" : "integer",
                              "format" : "int32"
                            },
                            "id" : {
                              "type" : "string"
                            }
                          }
                        },
                        "offsetAfter" : {
                          "type" : "object",
                          "properties" : {
                            "totalSeconds" : {
                              "type" : "integer",
                              "format" : "int32"
                            },
                            "id" : {
                              "type" : "string"
                            }
                          }
                        },
                        "dayOfWeek" : {
                          "type" : "string",
                          "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
                        },
                        "dayOfMonthIndicator" : {
                          "type" : "integer",
                          "format" : "int32"
                        },
                        "localTime" : {
                          "type" : "string",
                          "format" : "partial-time"
                        },
                        "midnightEndOfDay" : {
                          "type" : "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EventPosition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "venue" : {
            "$ref" : "#/components/schemas/Venue"
          },
          "performerId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "performer" : {
            "$ref" : "#/components/schemas/Performer"
          },
          "keywords" : {
            "type" : "string"
          },
          "chartUrl" : {
            "type" : "string"
          },
          "stubhubEventId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "stubhubEventUrl" : {
            "type" : "string"
          },
          "tags" : {
            "type" : "string"
          },
          "notes" : {
            "type" : "string"
          },
          "eiEventId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "optOutReplenishment" : {
            "type" : "boolean"
          },
          "ticketCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mySoldTickets" : {
            "type" : "integer",
            "format" : "int32"
          },
          "myCancelledTickets" : {
            "type" : "integer",
            "format" : "int32"
          },
          "disabled" : {
            "type" : "boolean"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cost" : {
            "type" : "number"
          },
          "lastPriceUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "listingCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "vividSeatsEventUrl" : {
            "type" : "string"
          }
        }
      },
      "PerformerPosition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "eventType" : {
            "type" : "string",
            "enum" : [ "CONCERT", "THEATER", "SPORT", "OTHER" ]
          },
          "category" : {
            "$ref" : "#/components/schemas/Category"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cost" : {
            "type" : "number"
          },
          "listingCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ExternalAccount" : {
        "required" : [ "displayName", "integrationProvider", "marketplace" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "displayName" : {
            "type" : "string"
          },
          "marketplace" : {
            "type" : "string",
            "enum" : [ "VIVID_SEATS", "STUBHUB", "TICKET_NETWORK", "EVENT_INVENTORY", "FANXCHANGE", "GAMETIME", "SEATGEEK", "TICKET_EVOLUTION", "TICKPICK", "VIAGOGO", "TICKET_CITY", "RAZORGATOR", "SCOREBIG", "OTHER" ]
          },
          "username" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "apiKey" : {
            "type" : "string"
          },
          "integrationProvider" : {
            "type" : "string",
            "enum" : [ "NONE", "NATIVE", "THIRD_PARTY" ]
          },
          "lastSweep" : {
            "type" : "string",
            "format" : "date-time"
          },
          "creditCardId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "creditCardGroupId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "encryptedPassword" : {
            "type" : "string"
          },
          "customerId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "vendorId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "markup" : {
            "type" : "number"
          },
          "fee" : {
            "type" : "number"
          },
          "autoHideSeatNumbers" : {
            "type" : "boolean"
          },
          "optInStubhubInhandDateLogic" : {
            "type" : "boolean"
          },
          "optInStubHubTransferDetailsSweep" : {
            "type" : "boolean"
          },
          "confirmOrders" : {
            "type" : "boolean"
          }
        }
      },
      "Hold" : {
        "required" : [ "expiryDate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "inventoryId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "user" : {
            "type" : "string"
          },
          "userId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "removedByUserId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customerId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "removedDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "notes" : {
            "type" : "string"
          },
          "externalRef" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "section" : {
            "type" : "string"
          },
          "row" : {
            "type" : "string"
          },
          "seats" : {
            "type" : "string"
          },
          "cost" : {
            "type" : "number"
          },
          "listPrice" : {
            "type" : "number",
            "readOnly" : true
          },
          "eventId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "HoldRequest" : {
        "required" : [ "expiryDate" ],
        "type" : "object",
        "properties" : {
          "customerId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "notes" : {
            "type" : "string"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "externalRef" : {
            "type" : "string"
          },
          "user" : {
            "type" : "string"
          },
          "userId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "inventoryId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "exchangePosId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "quantity" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "lowSeat" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "EventMapping" : {
        "required" : [ "eventName", "venueName" ],
        "type" : "object",
        "properties" : {
          "eventName" : {
            "type" : "string"
          },
          "venueName" : {
            "type" : "string"
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "valid" : {
            "type" : "boolean"
          }
        },
        "description" : "Event mapping information, required on inserts if eventId is empty."
      },
      "HoldSummary" : {
        "required" : [ "expiryDate" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "inventoryId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "user" : {
            "type" : "string"
          },
          "userId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "removedByUserId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customerId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "removedDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "notes" : {
            "type" : "string"
          },
          "externalRef" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "section" : {
            "type" : "string"
          },
          "row" : {
            "type" : "string"
          },
          "seats" : {
            "type" : "string"
          },
          "cost" : {
            "type" : "number"
          },
          "listPrice" : {
            "type" : "number",
            "readOnly" : true
          },
          "eventId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "inventory" : {
            "$ref" : "#/components/schemas/Inventory"
          },
          "event" : {
            "$ref" : "#/components/schemas/Event"
          }
        }
      },
      "Inventory" : {
        "required" : [ "cost", "eventId", "quantity", "row", "seatType", "section", "splitType", "stockType" ],
        "type" : "object",
        "properties" : {
          "inHandDate" : {
            "type" : "string",
            "description" : "The  date that the tickets will be in hand",
            "format" : "date"
          },
          "id" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "eventId" : {
            "type" : "integer",
            "description" : "Required on inserts if event mapping is empty.",
            "format" : "int64"
          },
          "quantity" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "Number of tickets available, implied from tickets array if present.",
            "format" : "int32"
          },
          "notes" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string"
          },
          "section" : {
            "maxLength" : 51,
            "minLength" : 1,
            "type" : "string"
          },
          "friendlySection" : {
            "type" : "string",
            "description" : "Friendly name for Section."
          },
          "row" : {
            "maxLength" : 44,
            "minLength" : 1,
            "type" : "string"
          },
          "friendlyRow" : {
            "type" : "string",
            "description" : "Friendly name for Row."
          },
          "secondRow" : {
            "maxLength" : 44,
            "minLength" : 1,
            "type" : "string"
          },
          "lowSeat" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "Required on inserts if tickets array is empty.",
            "format" : "int32"
          },
          "highSeat" : {
            "type" : "integer",
            "description" : "Required on inserts if tickets array is empty.",
            "format" : "int32"
          },
          "cost" : {
            "minimum" : 0,
            "type" : "number"
          },
          "taxedCost" : {
            "minimum" : 0,
            "type" : "number"
          },
          "taxedCostAverage" : {
            "minimum" : 0,
            "type" : "number"
          },
          "faceValue" : {
            "minimum" : 0,
            "type" : "number"
          },
          "tickets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Ticket"
            }
          },
          "ticketIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "stockType" : {
            "type" : "string",
            "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
          },
          "splitType" : {
            "type" : "string",
            "description" : "How the tickets may be split",
            "enum" : [ "DEFAULT", "ANY", "CUSTOM", "NEVERLEAVEONE" ]
          },
          "customSplit" : {
            "pattern" : "^\\d*(,\\d*)*$",
            "type" : "string"
          },
          "listPrice" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number"
          },
          "vividRetailPrice" : {
            "type" : "number"
          },
          "expectedValue" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number"
          },
          "publicNotes" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string"
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "ON_HOLD", "DEPLETED" ]
          },
          "inHandDaysBeforeEvent" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastPriceUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdBy" : {
            "type" : "string"
          },
          "createdByUserId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdateBy" : {
            "type" : "string"
          },
          "lastDeltaUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "version" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tags" : {
            "type" : "string"
          },
          "seatType" : {
            "type" : "string",
            "description" : "Seat type.",
            "enum" : [ "CONSECUTIVE", "ALTERNATING", "GA", "PIGGYBACK" ]
          },
          "eventMapping" : {
            "$ref" : "#/components/schemas/EventMapping"
          },
          "mappingId" : {
            "type" : "integer",
            "description" : "Mapping id if this inventory was sent to mapping. Read-only.",
            "format" : "int64"
          },
          "exchangePosId" : {
            "type" : "integer",
            "description" : "Id to provide to exchanges for listing delete and regeneration compatibility. This id is automatically regenerated when files or bar codes are edited or remove and section or rows get updated. Read-only.",
            "format" : "int64"
          },
          "broadcast" : {
            "type" : "boolean",
            "description" : "Broadcast."
          },
          "zoneSeating" : {
            "type" : "boolean",
            "description" : "Zone seating"
          },
          "electronicTransfer" : {
            "type" : "boolean"
          },
          "optOutAutoPrice" : {
            "type" : "boolean"
          },
          "hideSeatNumbers" : {
            "type" : "boolean",
            "description" : "Hide seat numbers from exchanges."
          },
          "vsrOption" : {
            "type" : "string",
            "enum" : [ "ALL", "EVENT_INVENTORY", "OTHER", "NONE" ]
          },
          "replenishmentGroupId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "replenishmentGroup" : {
            "type" : "string"
          },
          "shownQuantity" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "integratedListing" : {
            "type" : "boolean"
          },
          "ticketsMerged" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "ticketsSplit" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "auditNote" : {
            "type" : "string"
          },
          "filesUploaded" : {
            "type" : "boolean"
          },
          "barCodesEntered" : {
            "type" : "boolean"
          },
          "externalTicketIdEntered" : {
            "type" : "boolean"
          },
          "instantTransfer" : {
            "type" : "boolean",
            "description" : "Is instant transfer."
          }
        }
      },
      "Ticket" : {
        "required" : [ "cost", "faceValue", "row", "seatNumber", "section", "sellPrice", "status", "stockType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier of the ticket.",
            "format" : "int64"
          },
          "seatNumber" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "Seat number, must be numeric and passed low to high.",
            "format" : "int32"
          },
          "fileName" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string",
            "description" : "If present, a pdf file exists for this ticket."
          },
          "barCode" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string",
            "description" : "The barcode associated with this ticket."
          },
          "externalTicketId" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "External Id connecting skybox ticket with external systems/marketplaces."
          },
          "inventoryId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceLineId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "purchaseLineId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "friendlySection" : {
            "type" : "string",
            "description" : "Friendly name for Section."
          },
          "section" : {
            "maxLength" : 51,
            "minLength" : 1,
            "type" : "string"
          },
          "friendlyRow" : {
            "type" : "string",
            "description" : "Friendly name for Row."
          },
          "row" : {
            "maxLength" : 44,
            "minLength" : 1,
            "type" : "string"
          },
          "notes" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string"
          },
          "cost" : {
            "type" : "number"
          },
          "faceValue" : {
            "minimum" : 0,
            "exclusiveMinimum" : false,
            "type" : "number"
          },
          "taxedCost" : {
            "type" : "number"
          },
          "sellPrice" : {
            "minimum" : 0,
            "exclusiveMinimum" : false,
            "type" : "number"
          },
          "stockType" : {
            "type" : "string",
            "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
          },
          "eventId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "SOLD", "ERROR", "CANCELLED" ]
          },
          "base64FileBytes" : {
            "type" : "string",
            "description" : "Base64 encoded byte array of the ticket file. Only used in write operations."
          },
          "disclosures" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "attributes" : {
            "type" : "array",
            "description" : "List of attributes for the ticket",
            "items" : {
              "type" : "string",
              "description" : "List of attributes for the ticket"
            }
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdBy" : {
            "type" : "string"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdateBy" : {
            "type" : "string"
          },
          "dateCancelled" : {
            "type" : "string",
            "format" : "date-time"
          },
          "cancelledByUserId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "auditNote" : {
            "type" : "string"
          }
        },
        "description" : "An individual ticket"
      },
      "MergeInventoryRequest" : {
        "required" : [ "inventoryIds" ],
        "type" : "object",
        "properties" : {
          "inventoryIds" : {
            "maxItems" : 2147483647,
            "minItems" : 2,
            "type" : "array",
            "description" : "Inventory id's which will be merged.",
            "items" : {
              "type" : "integer",
              "description" : "Inventory id's which will be merged.",
              "format" : "int64"
            }
          },
          "publicNotes" : {
            "type" : "string",
            "description" : "Public notes of the merged inventory."
          },
          "mergingType" : {
            "type" : "string",
            "description" : "Strategy to merge public notes in the inventory",
            "enum" : [ "COMBINE", "WIPE", "NEW" ]
          }
        }
      },
      "BulkSwapEventRequest" : {
        "type" : "object",
        "properties" : {
          "inventoryIds" : {
            "type" : "array",
            "description" : "Inventory ids whose event will be swapped.",
            "items" : {
              "type" : "integer",
              "description" : "Inventory ids whose event will be swapped.",
              "format" : "int64"
            }
          },
          "eventId" : {
            "type" : "integer",
            "description" : "The new event id for the inventory items.",
            "format" : "int64"
          }
        }
      },
      "BulkInventoryUpdateRequest" : {
        "required" : [ "inventoryIds" ],
        "type" : "object",
        "properties" : {
          "inventoryIds" : {
            "type" : "array",
            "description" : "Inventory id's which will be update.",
            "items" : {
              "type" : "integer",
              "description" : "Inventory id's which will be update.",
              "format" : "int64"
            }
          },
          "publicNotesToReplace" : {
            "type" : "string",
            "description" : "New public notes."
          },
          "publicNotesToAdd" : {
            "type" : "string",
            "description" : "Public notes to add to existing notes."
          },
          "internalNotesToReplace" : {
            "type" : "string",
            "description" : "New internal notes."
          },
          "internalNotesToAdd" : {
            "type" : "string",
            "description" : "Internal notes to add to existing notes."
          },
          "splitType" : {
            "type" : "string",
            "description" : "Split type to update",
            "enum" : [ "DEFAULT", "ANY", "CUSTOM", "NEVERLEAVEONE" ]
          },
          "customSplit" : {
            "type" : "string",
            "description" : "Valid split quantities"
          },
          "seatType" : {
            "type" : "string",
            "description" : "Seat type to update",
            "enum" : [ "CONSECUTIVE", "ALTERNATING", "GA", "PIGGYBACK" ]
          },
          "inHandDaysBeforeEvent" : {
            "type" : "integer",
            "description" : "In-hand days before event to update",
            "format" : "int32"
          },
          "stockType" : {
            "type" : "string",
            "description" : "Stock type to update",
            "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
          },
          "zoneSeating" : {
            "type" : "boolean",
            "description" : "Zone seating"
          },
          "hideSeatNumbers" : {
            "type" : "boolean",
            "description" : "Hide seat numbers"
          },
          "friendlySection" : {
            "type" : "string",
            "description" : "Friendly Section"
          },
          "section" : {
            "maxLength" : 51,
            "minLength" : 0,
            "type" : "string",
            "description" : "Section"
          },
          "friendlyRow" : {
            "type" : "string",
            "description" : "Friendly Row"
          },
          "row" : {
            "type" : "string",
            "description" : "Row"
          },
          "removeBarcode" : {
            "type" : "boolean",
            "description" : "Barcodes should be removed"
          },
          "removePdf" : {
            "type" : "boolean",
            "description" : "Whether pdfs should be removed"
          },
          "removeExternalTicketId" : {
            "type" : "boolean",
            "description" : "Whether external ticket IDs should be removed"
          },
          "ticketDisclosure" : {
            "type" : "string",
            "description" : "Ticket disclosure to update"
          },
          "inventoryAttribute" : {
            "type" : "string",
            "description" : "Inventory attribute to update"
          },
          "faceValue" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number",
            "description" : "Amount to set to each ticket's face value"
          },
          "optOutAutoPrice" : {
            "type" : "boolean",
            "description" : "Opt-out auto-price"
          },
          "broadcast" : {
            "type" : "boolean",
            "description" : "Broadcast to exchanges"
          },
          "electronicTransfer" : {
            "type" : "boolean",
            "description" : "Electronic transfer to set"
          },
          "noSplit" : {
            "type" : "boolean",
            "description" : "Whether split type is full quantity (no splits)"
          },
          "received" : {
            "type" : "boolean",
            "description" : "Received status to be set to the purchases of the inventories."
          },
          "vsrOption" : {
            "type" : "string",
            "description" : "VSR option",
            "enum" : [ "ALL", "EVENT_INVENTORY", "OTHER", "NONE" ]
          },
          "replenishmentGroupId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "clearDisclosures" : {
            "type" : "boolean"
          },
          "clearAttributes" : {
            "type" : "boolean"
          },
          "shownQuantity" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "force" : {
            "type" : "boolean"
          },
          "instantTransfer" : {
            "type" : "boolean",
            "description" : "Received instant transfer value to be set to the inventories."
          },
          "instantTransferOptedOut" : {
            "type" : "boolean",
            "description" : "Received instant transfer Opted Out value to be set to the inventories."
          },
          "integratedListing" : {
            "type" : "boolean"
          },
          "inHandDate" : {
            "type" : "string",
            "description" : "In-hand date to update",
            "format" : "date"
          }
        }
      },
      "ExpectedValueUpdateBulk" : {
        "required" : [ "expectedValue", "id" ],
        "type" : "object",
        "properties" : {
          "expectedValue" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number",
            "description" : "Amount to increase or decrease each ticket by"
          },
          "id" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "ID of inventory to update",
            "format" : "int64"
          }
        }
      },
      "InventoryFaceValueUpdateBulk" : {
        "required" : [ "id", "newFaceValue" ],
        "type" : "object",
        "properties" : {
          "newFaceValue" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number",
            "description" : "Amount to increase or decrease each face value ticket by"
          },
          "id" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "ID of inventory to update",
            "format" : "int64"
          }
        }
      },
      "InventoryPriceUpdateBulk" : {
        "required" : [ "id", "listPrice" ],
        "type" : "object",
        "properties" : {
          "listPrice" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number",
            "description" : "Amount to increase or decrease each ticket by"
          },
          "id" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "ID of inventory to update",
            "format" : "int64"
          },
          "broadcast" : {
            "type" : "boolean"
          }
        }
      },
      "InventoryTaxedCostUpdateBulk" : {
        "required" : [ "id", "newTaxedCost" ],
        "type" : "object",
        "properties" : {
          "newTaxedCost" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number",
            "description" : "Amount to increase or decrease each taxed cost ticket by"
          },
          "id" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "ID of inventory to update",
            "format" : "int64"
          }
        }
      },
      "InventorySummary" : {
        "required" : [ "cost", "eventId", "quantity", "row", "seatType", "section", "splitType", "stockType" ],
        "type" : "object",
        "properties" : {
          "inHandDate" : {
            "type" : "string",
            "description" : "The  date that the tickets will be in hand",
            "format" : "date"
          },
          "id" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "eventId" : {
            "type" : "integer",
            "description" : "Required on inserts if event mapping is empty.",
            "format" : "int64"
          },
          "quantity" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "Number of tickets available, implied from tickets array if present.",
            "format" : "int32"
          },
          "notes" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string"
          },
          "section" : {
            "maxLength" : 51,
            "minLength" : 1,
            "type" : "string"
          },
          "friendlySection" : {
            "type" : "string",
            "description" : "Friendly name for Section."
          },
          "row" : {
            "maxLength" : 44,
            "minLength" : 1,
            "type" : "string"
          },
          "friendlyRow" : {
            "type" : "string",
            "description" : "Friendly name for Row."
          },
          "secondRow" : {
            "maxLength" : 44,
            "minLength" : 1,
            "type" : "string"
          },
          "lowSeat" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "Required on inserts if tickets array is empty.",
            "format" : "int32"
          },
          "highSeat" : {
            "type" : "integer",
            "description" : "Required on inserts if tickets array is empty.",
            "format" : "int32"
          },
          "cost" : {
            "minimum" : 0,
            "type" : "number"
          },
          "taxedCost" : {
            "minimum" : 0,
            "type" : "number"
          },
          "taxedCostAverage" : {
            "minimum" : 0,
            "type" : "number"
          },
          "faceValue" : {
            "minimum" : 0,
            "type" : "number"
          },
          "tickets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Ticket"
            }
          },
          "ticketIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "stockType" : {
            "type" : "string",
            "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
          },
          "splitType" : {
            "type" : "string",
            "description" : "How the tickets may be split",
            "enum" : [ "DEFAULT", "ANY", "CUSTOM", "NEVERLEAVEONE" ]
          },
          "customSplit" : {
            "pattern" : "^\\d*(,\\d*)*$",
            "type" : "string"
          },
          "listPrice" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number"
          },
          "vividRetailPrice" : {
            "type" : "number"
          },
          "expectedValue" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number"
          },
          "publicNotes" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string"
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "ON_HOLD", "DEPLETED" ]
          },
          "inHandDaysBeforeEvent" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastPriceUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdBy" : {
            "type" : "string"
          },
          "createdByUserId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdateBy" : {
            "type" : "string"
          },
          "lastDeltaUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "version" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tags" : {
            "type" : "string"
          },
          "seatType" : {
            "type" : "string",
            "description" : "Seat type.",
            "enum" : [ "CONSECUTIVE", "ALTERNATING", "GA", "PIGGYBACK" ]
          },
          "eventMapping" : {
            "$ref" : "#/components/schemas/EventMapping"
          },
          "mappingId" : {
            "type" : "integer",
            "description" : "Mapping id if this inventory was sent to mapping. Read-only.",
            "format" : "int64"
          },
          "exchangePosId" : {
            "type" : "integer",
            "description" : "Id to provide to exchanges for listing delete and regeneration compatibility. This id is automatically regenerated when files or bar codes are edited or remove and section or rows get updated. Read-only.",
            "format" : "int64"
          },
          "broadcast" : {
            "type" : "boolean",
            "description" : "Broadcast."
          },
          "zoneSeating" : {
            "type" : "boolean",
            "description" : "Zone seating"
          },
          "electronicTransfer" : {
            "type" : "boolean"
          },
          "optOutAutoPrice" : {
            "type" : "boolean"
          },
          "hideSeatNumbers" : {
            "type" : "boolean",
            "description" : "Hide seat numbers from exchanges."
          },
          "vsrOption" : {
            "type" : "string",
            "enum" : [ "ALL", "EVENT_INVENTORY", "OTHER", "NONE" ]
          },
          "replenishmentGroupId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "replenishmentGroup" : {
            "type" : "string"
          },
          "shownQuantity" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "integratedListing" : {
            "type" : "boolean"
          },
          "ticketsMerged" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "ticketsSplit" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "auditNote" : {
            "type" : "string"
          },
          "filesUploaded" : {
            "type" : "boolean"
          },
          "barCodesEntered" : {
            "type" : "boolean"
          },
          "externalTicketIdEntered" : {
            "type" : "boolean"
          },
          "instantTransfer" : {
            "type" : "boolean",
            "description" : "Is instant transfer."
          },
          "seatNumbers" : {
            "type" : "string"
          },
          "listed" : {
            "type" : "boolean"
          },
          "consignmentStatus" : {
            "type" : "string"
          },
          "cooperative" : {
            "type" : "boolean"
          },
          "holdId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "hold" : {
            "$ref" : "#/components/schemas/Hold"
          },
          "unitCostAverage" : {
            "type" : "number",
            "description" : "Unit Cost Average"
          },
          "faceValueAverage" : {
            "type" : "number"
          },
          "currencies" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
            }
          },
          "received" : {
            "type" : "string"
          },
          "vendorId" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "inHand" : {
            "type" : "boolean"
          },
          "hasTaxedCost" : {
            "type" : "string"
          },
          "daysOld" : {
            "type" : "integer",
            "description" : "Days old since the listing was created",
            "format" : "int32"
          },
          "taxTags" : {
            "$ref" : "#/components/schemas/TaxTags"
          },
          "ticketIdString" : {
            "type" : "string",
            "writeOnly" : true
          },
          "event" : {
            "$ref" : "#/components/schemas/Event"
          }
        }
      },
      "TaxTags" : {
        "type" : "object",
        "properties" : {
          "field" : {
            "type" : "string",
            "enum" : [ "TAGS", "NOTES" ]
          },
          "tags" : {
            "type" : "string"
          }
        }
      },
      "ExchangePosIdHistoryResponse" : {
        "type" : "object",
        "properties" : {
          "exchangePosId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "inventoryId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "InventoryBarcodeResponse" : {
        "type" : "object",
        "properties" : {
          "exchangePosId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "inventoryId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "section" : {
            "type" : "string"
          },
          "row" : {
            "type" : "string"
          },
          "seatNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "barCode" : {
            "type" : "string"
          },
          "externalTicketId" : {
            "type" : "string"
          }
        }
      },
      "InventoryPriceHistory" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "action" : {
            "type" : "string",
            "enum" : [ "INSERT", "UPDATE", "DELETE", "PARTIAL_UPDATE", "CANCEL" ]
          },
          "price" : {
            "type" : "number"
          },
          "dateOfAction" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "Consignment" : {
        "required" : [ "amount", "mode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "purchaseId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "amount" : {
            "type" : "number"
          },
          "mode" : {
            "type" : "string",
            "enum" : [ "FIXED", "PERCENT" ]
          },
          "completed" : {
            "type" : "boolean"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConsignmentLine"
            }
          }
        }
      },
      "ConsignmentLine" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "consignmentId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceLineId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "open" : {
            "type" : "boolean"
          },
          "originalUnitCost" : {
            "type" : "number"
          },
          "mode" : {
            "type" : "string",
            "enum" : [ "FIXED", "PERCENT" ]
          },
          "consignmentValue" : {
            "type" : "number"
          }
        }
      },
      "Line" : {
        "required" : [ "accountId", "amount", "lineItemType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "targetId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the line. Ignored for inventory lines."
          },
          "amount" : {
            "type" : "number",
            "description" : "The total for this line. Passed through to ticket.sellPrice or ticket.cost for inventory items."
          },
          "lineType" : {
            "type" : "string",
            "enum" : [ "PURCHASE", "INVOICE" ]
          },
          "lineItemType" : {
            "type" : "string",
            "description" : "The type of the line item.",
            "enum" : [ "GENERIC", "INVENTORY" ]
          },
          "itemIds" : {
            "type" : "array",
            "description" : "The itemIds, representing ticketIds if the line item is Inventory. Required for invoice line inserts, ignored otherwise.",
            "items" : {
              "type" : "integer",
              "description" : "The itemIds, representing ticketIds if the line item is Inventory. Required for invoice line inserts, ignored otherwise.",
              "format" : "int64"
            }
          },
          "inventory" : {
            "$ref" : "#/components/schemas/Inventory"
          },
          "cancelled" : {
            "type" : "boolean",
            "description" : "True if the tickets on this line are cancelled, false otherwise. Read-only."
          },
          "delete" : {
            "type" : "boolean"
          },
          "cancel" : {
            "type" : "boolean"
          },
          "fillLineId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "inventoryIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdBy" : {
            "type" : "string"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdateBy" : {
            "type" : "string"
          }
        }
      },
      "Purchase" : {
        "required" : [ "currencyCode", "deliveryMethod", "dueDate", "lines", "otherAmount", "paymentMethod", "paymentStatus", "purchaseTerm", "shippingAmount", "taxAmount" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "vendorId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "internalId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Line"
            }
          },
          "purchaseTerm" : {
            "type" : "string",
            "enum" : [ "NET0", "NET10", "NET15", "NET25", "NET30", "NET45", "NET60" ]
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          },
          "paymentRef" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "deliveryMethod" : {
            "type" : "string",
            "enum" : [ "COURIER", "EMAIL", "USPS", "UPS", "FEDEX", "WILLCALL", "PAPERLESS", "MEETANDGREET", "FLASHSEATS", "MOBILE_DELIVERY", "OFFICE_PICKUP", "OTHER" ]
          },
          "shippingAddressId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "billingAddressId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "shippingAmount" : {
            "type" : "number"
          },
          "otherAmount" : {
            "type" : "number"
          },
          "internalNotes" : {
            "maxLength" : 10000,
            "minLength" : 0,
            "type" : "string"
          },
          "publicNotes" : {
            "maxLength" : 10000,
            "minLength" : 0,
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "tags" : {
            "type" : "string"
          },
          "createdBy" : {
            "type" : "string"
          },
          "lastUpdateBy" : {
            "type" : "string"
          },
          "externalRef" : {
            "type" : "string",
            "description" : "External reference number for purchase"
          },
          "paymentStatus" : {
            "type" : "string",
            "description" : "Payment status",
            "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
          },
          "creditCardId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "creditCardGroupId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "currencyCode" : {
            "type" : "string",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          },
          "payments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PurchasePayment"
            }
          },
          "notes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PurchaseNote"
            }
          },
          "received" : {
            "type" : "boolean"
          },
          "consignment" : {
            "$ref" : "#/components/schemas/Consignment"
          },
          "cooperative" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "CONTACT_NEEDED", "COMPLETED", "DELIVERY_FAILURE", "EVENT_CANCELLED", "EVENT_RESCHEDULED", "INVESTIGATION_CLOSED", "INVESTIGATION_CLOSED_BUYER_FAVOR", "INVESTIGATION_CLOSED_SELLER_FAVOR", "INVESTIGATION_PENDING", "MANAGER_REVIEW", "ORDER_PARTIALLY_VOID_CANCELLED", "ORDER_VOID_CANCELLED", "WAITING_FOR_RESPONSE" ]
          },
          "airbill" : {
            "type" : "string"
          },
          "outstandingBalance" : {
            "type" : "number"
          },
          "autoPo" : {
            "type" : "boolean",
            "writeOnly" : true
          }
        }
      },
      "PurchaseNote" : {
        "required" : [ "text" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "purchaseId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "text" : {
            "type" : "string"
          },
          "author" : {
            "type" : "string"
          }
        }
      },
      "PurchasePayment" : {
        "required" : [ "accountId", "amount" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "referenceNumber" : {
            "maxLength" : 65,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number",
            "description" : "The total for this payment."
          },
          "paymentDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "userId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "entityId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "paymentType" : {
            "type" : "string",
            "enum" : [ "INVOICE", "PURCHASE" ]
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          },
          "purchaseId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "PurchasedInventorySummary" : {
        "required" : [ "cost", "eventId", "quantity", "row", "seatType", "section", "splitType", "stockType" ],
        "type" : "object",
        "properties" : {
          "inHandDate" : {
            "type" : "string",
            "description" : "The  date that the tickets will be in hand",
            "format" : "date"
          },
          "id" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "eventId" : {
            "type" : "integer",
            "description" : "Required on inserts if event mapping is empty.",
            "format" : "int64"
          },
          "quantity" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "Number of tickets available, implied from tickets array if present.",
            "format" : "int32"
          },
          "notes" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string"
          },
          "section" : {
            "maxLength" : 51,
            "minLength" : 1,
            "type" : "string"
          },
          "friendlySection" : {
            "type" : "string",
            "description" : "Friendly name for Section."
          },
          "row" : {
            "maxLength" : 44,
            "minLength" : 1,
            "type" : "string"
          },
          "friendlyRow" : {
            "type" : "string",
            "description" : "Friendly name for Row."
          },
          "secondRow" : {
            "maxLength" : 44,
            "minLength" : 1,
            "type" : "string"
          },
          "lowSeat" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "Required on inserts if tickets array is empty.",
            "format" : "int32"
          },
          "highSeat" : {
            "type" : "integer",
            "description" : "Required on inserts if tickets array is empty.",
            "format" : "int32"
          },
          "cost" : {
            "minimum" : 0,
            "type" : "number"
          },
          "taxedCost" : {
            "minimum" : 0,
            "type" : "number"
          },
          "taxedCostAverage" : {
            "minimum" : 0,
            "type" : "number"
          },
          "faceValue" : {
            "minimum" : 0,
            "type" : "number"
          },
          "tickets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Ticket"
            }
          },
          "ticketIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "stockType" : {
            "type" : "string",
            "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
          },
          "splitType" : {
            "type" : "string",
            "description" : "How the tickets may be split",
            "enum" : [ "DEFAULT", "ANY", "CUSTOM", "NEVERLEAVEONE" ]
          },
          "customSplit" : {
            "pattern" : "^\\d*(,\\d*)*$",
            "type" : "string"
          },
          "listPrice" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number"
          },
          "vividRetailPrice" : {
            "type" : "number"
          },
          "expectedValue" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number"
          },
          "publicNotes" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string"
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "ON_HOLD", "DEPLETED" ]
          },
          "inHandDaysBeforeEvent" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastPriceUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdBy" : {
            "type" : "string"
          },
          "createdByUserId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdateBy" : {
            "type" : "string"
          },
          "lastDeltaUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "version" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tags" : {
            "type" : "string"
          },
          "seatType" : {
            "type" : "string",
            "description" : "Seat type.",
            "enum" : [ "CONSECUTIVE", "ALTERNATING", "GA", "PIGGYBACK" ]
          },
          "eventMapping" : {
            "$ref" : "#/components/schemas/EventMapping"
          },
          "mappingId" : {
            "type" : "integer",
            "description" : "Mapping id if this inventory was sent to mapping. Read-only.",
            "format" : "int64"
          },
          "exchangePosId" : {
            "type" : "integer",
            "description" : "Id to provide to exchanges for listing delete and regeneration compatibility. This id is automatically regenerated when files or bar codes are edited or remove and section or rows get updated. Read-only.",
            "format" : "int64"
          },
          "broadcast" : {
            "type" : "boolean",
            "description" : "Broadcast."
          },
          "zoneSeating" : {
            "type" : "boolean",
            "description" : "Zone seating"
          },
          "electronicTransfer" : {
            "type" : "boolean"
          },
          "optOutAutoPrice" : {
            "type" : "boolean"
          },
          "hideSeatNumbers" : {
            "type" : "boolean",
            "description" : "Hide seat numbers from exchanges."
          },
          "vsrOption" : {
            "type" : "string",
            "enum" : [ "ALL", "EVENT_INVENTORY", "OTHER", "NONE" ]
          },
          "replenishmentGroupId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "replenishmentGroup" : {
            "type" : "string"
          },
          "shownQuantity" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "integratedListing" : {
            "type" : "boolean"
          },
          "ticketsMerged" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "ticketsSplit" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "auditNote" : {
            "type" : "string"
          },
          "filesUploaded" : {
            "type" : "boolean"
          },
          "barCodesEntered" : {
            "type" : "boolean"
          },
          "externalTicketIdEntered" : {
            "type" : "boolean"
          },
          "instantTransfer" : {
            "type" : "boolean",
            "description" : "Is instant transfer."
          },
          "seatNumbers" : {
            "type" : "string"
          },
          "listed" : {
            "type" : "boolean"
          },
          "consignmentStatus" : {
            "type" : "string"
          },
          "cooperative" : {
            "type" : "boolean"
          },
          "holdId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "hold" : {
            "$ref" : "#/components/schemas/Hold"
          },
          "unitCostAverage" : {
            "type" : "number",
            "description" : "Unit Cost Average"
          },
          "faceValueAverage" : {
            "type" : "number"
          },
          "currencies" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
            }
          },
          "received" : {
            "type" : "string"
          },
          "vendorId" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "inHand" : {
            "type" : "boolean"
          },
          "hasTaxedCost" : {
            "type" : "string"
          },
          "daysOld" : {
            "type" : "integer",
            "description" : "Days old since the listing was created",
            "format" : "int32"
          },
          "vendorDisplayName" : {
            "type" : "string"
          },
          "purchase" : {
            "$ref" : "#/components/schemas/Purchase"
          },
          "invoiceId" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "inventoryIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "purchaseLineId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "ticketStatus" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "SOLD", "ERROR", "CANCELLED" ]
          },
          "taxTags" : {
            "$ref" : "#/components/schemas/TaxTags"
          },
          "ticketIdString" : {
            "type" : "string",
            "writeOnly" : true
          },
          "event" : {
            "$ref" : "#/components/schemas/Event"
          }
        }
      },
      "PurchasedInventorySummaryV2" : {
        "type" : "object",
        "properties" : {
          "purchaseLineId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "purchase" : {
            "$ref" : "#/components/schemas/Purchase"
          },
          "allPurchaseLineIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "event" : {
            "$ref" : "#/components/schemas/Event"
          },
          "section" : {
            "type" : "string"
          },
          "row" : {
            "type" : "string"
          },
          "secondRow" : {
            "type" : "string"
          },
          "zoneSeating" : {
            "type" : "string"
          },
          "seatType" : {
            "type" : "string",
            "enum" : [ "CONSECUTIVE", "ALTERNATING", "GA", "PIGGYBACK" ]
          },
          "cost" : {
            "type" : "number"
          },
          "availableCost" : {
            "type" : "number"
          },
          "soldCost" : {
            "type" : "number"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "availableQuantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "soldQuantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "cancelledQuantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seatNumbers" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "inHandDate" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : "date"
            }
          },
          "ticketStatus" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "AVAILABLE", "SOLD", "ERROR", "CANCELLED" ]
            }
          },
          "holdInventory" : {
            "type" : "boolean"
          },
          "stockType" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
            }
          },
          "notes" : {
            "type" : "string"
          },
          "inventoryIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "invoiceIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "tags" : {
            "type" : "string"
          },
          "ticketIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "vendorDisplayName" : {
            "type" : "string"
          },
          "unitCost" : {
            "type" : "number"
          },
          "consignmentStatus" : {
            "type" : "string"
          },
          "ticketFaceValueAverage" : {
            "type" : "number"
          },
          "received" : {
            "type" : "string"
          },
          "creditCardGroup" : {
            "type" : "string"
          },
          "creditCardLastDigits" : {
            "type" : "string"
          },
          "barCodesEntered" : {
            "type" : "boolean"
          },
          "externalTicketIdEntered" : {
            "type" : "boolean"
          },
          "filesUploaded" : {
            "type" : "boolean"
          },
          "ticketsMerged" : {
            "type" : "boolean"
          },
          "lastPurchaseNote" : {
            "type" : "string"
          },
          "lastPurchaseNoteDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "inventoryPublicNotes" : {
            "type" : "string"
          },
          "taxedCost" : {
            "type" : "number"
          },
          "unitTaxedCost" : {
            "type" : "number"
          }
        }
      },
      "SoldInventorySummary" : {
        "required" : [ "cost", "eventId", "quantity", "row", "seatType", "section", "splitType", "stockType" ],
        "type" : "object",
        "properties" : {
          "inHandDate" : {
            "type" : "string",
            "description" : "The  date that the tickets will be in hand",
            "format" : "date"
          },
          "id" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "eventId" : {
            "type" : "integer",
            "description" : "Required on inserts if event mapping is empty.",
            "format" : "int64"
          },
          "quantity" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "Number of tickets available, implied from tickets array if present.",
            "format" : "int32"
          },
          "notes" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string"
          },
          "section" : {
            "maxLength" : 51,
            "minLength" : 1,
            "type" : "string"
          },
          "friendlySection" : {
            "type" : "string",
            "description" : "Friendly name for Section."
          },
          "row" : {
            "maxLength" : 44,
            "minLength" : 1,
            "type" : "string"
          },
          "friendlyRow" : {
            "type" : "string",
            "description" : "Friendly name for Row."
          },
          "secondRow" : {
            "maxLength" : 44,
            "minLength" : 1,
            "type" : "string"
          },
          "lowSeat" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "Required on inserts if tickets array is empty.",
            "format" : "int32"
          },
          "highSeat" : {
            "type" : "integer",
            "description" : "Required on inserts if tickets array is empty.",
            "format" : "int32"
          },
          "cost" : {
            "minimum" : 0,
            "type" : "number"
          },
          "taxedCost" : {
            "minimum" : 0,
            "type" : "number"
          },
          "taxedCostAverage" : {
            "minimum" : 0,
            "type" : "number"
          },
          "faceValue" : {
            "minimum" : 0,
            "type" : "number"
          },
          "tickets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Ticket"
            }
          },
          "ticketIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "stockType" : {
            "type" : "string",
            "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
          },
          "splitType" : {
            "type" : "string",
            "description" : "How the tickets may be split",
            "enum" : [ "DEFAULT", "ANY", "CUSTOM", "NEVERLEAVEONE" ]
          },
          "customSplit" : {
            "pattern" : "^\\d*(,\\d*)*$",
            "type" : "string"
          },
          "listPrice" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number"
          },
          "vividRetailPrice" : {
            "type" : "number"
          },
          "expectedValue" : {
            "minimum" : 0.00,
            "exclusiveMinimum" : false,
            "type" : "number"
          },
          "publicNotes" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string"
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "ON_HOLD", "DEPLETED" ]
          },
          "inHandDaysBeforeEvent" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastPriceUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdBy" : {
            "type" : "string"
          },
          "createdByUserId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdateBy" : {
            "type" : "string"
          },
          "lastDeltaUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "version" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tags" : {
            "type" : "string"
          },
          "seatType" : {
            "type" : "string",
            "description" : "Seat type.",
            "enum" : [ "CONSECUTIVE", "ALTERNATING", "GA", "PIGGYBACK" ]
          },
          "eventMapping" : {
            "$ref" : "#/components/schemas/EventMapping"
          },
          "mappingId" : {
            "type" : "integer",
            "description" : "Mapping id if this inventory was sent to mapping. Read-only.",
            "format" : "int64"
          },
          "exchangePosId" : {
            "type" : "integer",
            "description" : "Id to provide to exchanges for listing delete and regeneration compatibility. This id is automatically regenerated when files or bar codes are edited or remove and section or rows get updated. Read-only.",
            "format" : "int64"
          },
          "broadcast" : {
            "type" : "boolean",
            "description" : "Broadcast."
          },
          "zoneSeating" : {
            "type" : "boolean",
            "description" : "Zone seating"
          },
          "electronicTransfer" : {
            "type" : "boolean"
          },
          "optOutAutoPrice" : {
            "type" : "boolean"
          },
          "hideSeatNumbers" : {
            "type" : "boolean",
            "description" : "Hide seat numbers from exchanges."
          },
          "vsrOption" : {
            "type" : "string",
            "enum" : [ "ALL", "EVENT_INVENTORY", "OTHER", "NONE" ]
          },
          "replenishmentGroupId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "replenishmentGroup" : {
            "type" : "string"
          },
          "shownQuantity" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "integratedListing" : {
            "type" : "boolean"
          },
          "ticketsMerged" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "ticketsSplit" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "auditNote" : {
            "type" : "string"
          },
          "filesUploaded" : {
            "type" : "boolean"
          },
          "barCodesEntered" : {
            "type" : "boolean"
          },
          "externalTicketIdEntered" : {
            "type" : "boolean"
          },
          "instantTransfer" : {
            "type" : "boolean",
            "description" : "Is instant transfer."
          },
          "seatNumbers" : {
            "type" : "string"
          },
          "listed" : {
            "type" : "boolean"
          },
          "consignmentStatus" : {
            "type" : "string"
          },
          "cooperative" : {
            "type" : "boolean"
          },
          "holdId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "hold" : {
            "$ref" : "#/components/schemas/Hold"
          },
          "unitCostAverage" : {
            "type" : "number",
            "description" : "Unit Cost Average"
          },
          "faceValueAverage" : {
            "type" : "number"
          },
          "currencies" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
            }
          },
          "received" : {
            "type" : "string"
          },
          "vendorId" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "inHand" : {
            "type" : "boolean"
          },
          "hasTaxedCost" : {
            "type" : "string"
          },
          "daysOld" : {
            "type" : "integer",
            "description" : "Days old since the listing was created",
            "format" : "int32"
          },
          "invoiceId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceLineId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "daysListed" : {
            "type" : "integer",
            "format" : "int32"
          },
          "purchaseDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "customerDisplayName" : {
            "type" : "string"
          },
          "customerId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "deliveryMethod" : {
            "type" : "string",
            "enum" : [ "COURIER", "EMAIL", "USPS", "UPS", "FEDEX", "WILLCALL", "PAPERLESS", "MEETANDGREET", "FLASHSEATS", "MOBILE_DELIVERY", "OFFICE_PICKUP", "OTHER" ]
          },
          "total" : {
            "type" : "number"
          },
          "invoiceExternalRef" : {
            "type" : "string"
          },
          "purchaseExternalRef" : {
            "type" : "string"
          },
          "fulfillmentStatus" : {
            "type" : "string",
            "enum" : [ "PENDING", "COMPLETE" ]
          },
          "paymentStatus" : {
            "type" : "string",
            "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
          },
          "profit" : {
            "type" : "number"
          },
          "profitMargin" : {
            "type" : "number"
          },
          "roi" : {
            "type" : "number"
          },
          "pdfsOrBarcodesAttached" : {
            "type" : "boolean"
          },
          "lastInvoiceNotes" : {
            "type" : "string"
          },
          "lastInvoiceNotesDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "invoiceAirbill" : {
            "type" : "string"
          },
          "vendor" : {
            "type" : "string"
          },
          "currencyCode" : {
            "type" : "string",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          },
          "purchaseIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "fulfillmentDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "unitTicketSales" : {
            "type" : "number"
          },
          "invoiceCreatedBy" : {
            "type" : "string"
          },
          "invoiceTags" : {
            "type" : "string"
          },
          "purchaseTags" : {
            "type" : "string"
          },
          "outstandingBalance" : {
            "type" : "number"
          },
          "eventDayOfWeek" : {
            "type" : "string"
          },
          "invoiceStatus" : {
            "type" : "string",
            "enum" : [ "CONTACT_NEEDED", "COMPLETED", "DELIVERY_FAILURE", "EVENT_CANCELLED", "EVENT_RESCHEDULED", "INVESTIGATION_CLOSED", "INVESTIGATION_CLOSED_BUYER_FAVOR", "INVESTIGATION_CLOSED_SELLER_FAVOR", "INVESTIGATION_PENDING", "MANAGER_REVIEW", "ORDER_PARTIALLY_VOID_CANCELLED", "ORDER_VOID_CANCELLED", "WAITING_FOR_RESPONSE" ]
          },
          "lastInvoiceNotesUser" : {
            "type" : "string"
          },
          "poCreatedBy" : {
            "type" : "string"
          },
          "customerType" : {
            "type" : "string",
            "enum" : [ "MARKETPLACE", "PERFORMER", "BROKER", "RETAIL", "CONCIERGE", "TRAVELAGENT", "MEMBER" ]
          },
          "lastInvoiceStatusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastInvoiceStatusUser" : {
            "type" : "string"
          },
          "taxTags" : {
            "$ref" : "#/components/schemas/TaxTags"
          },
          "ticketIdString" : {
            "type" : "string",
            "writeOnly" : true
          },
          "event" : {
            "$ref" : "#/components/schemas/Event"
          }
        }
      },
      "BulkSoldSwapEventRequest" : {
        "required" : [ "invoiceLineIds" ],
        "type" : "object",
        "properties" : {
          "invoiceLineIds" : {
            "type" : "array",
            "description" : "Line ids whose event will be swapped.",
            "items" : {
              "type" : "integer",
              "description" : "Line ids whose event will be swapped.",
              "format" : "int64"
            }
          },
          "eventId" : {
            "type" : "integer",
            "description" : "The new event id for the lines items.",
            "format" : "int64"
          }
        }
      },
      "SyncInventoryRequest" : {
        "type" : "object",
        "properties" : {
          "inventoryIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "UpdatePurchaseInventoryRequest" : {
        "required" : [ "row", "section" ],
        "type" : "object",
        "properties" : {
          "inventoryId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "friendlySection" : {
            "type" : "string",
            "description" : "Friendly Section"
          },
          "section" : {
            "maxLength" : 51,
            "minLength" : 0,
            "type" : "string"
          },
          "friendlyRow" : {
            "type" : "string",
            "description" : "Friendly Row"
          },
          "row" : {
            "maxLength" : 44,
            "minLength" : 0,
            "type" : "string"
          },
          "secondRow" : {
            "maxLength" : 44,
            "minLength" : 0,
            "type" : "string"
          },
          "force" : {
            "type" : "boolean"
          }
        }
      },
      "Invoice" : {
        "required" : [ "fulfillmentStatus", "lines", "otherAmount", "paymentStatus", "salesTerm", "shippingAmount", "taxAmount" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "customerId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "internalId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Line"
            }
          },
          "salesTerm" : {
            "type" : "string",
            "enum" : [ "NET0", "NET10", "NET15", "NET25", "NET30", "NET45", "NET60" ]
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          },
          "paymentRef" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "deliveryMethod" : {
            "type" : "string",
            "enum" : [ "COURIER", "EMAIL", "USPS", "UPS", "FEDEX", "WILLCALL", "PAPERLESS", "MEETANDGREET", "FLASHSEATS", "MOBILE_DELIVERY", "OFFICE_PICKUP", "OTHER" ]
          },
          "shippingAddressId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "billingAddressId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "shippingAmount" : {
            "type" : "number"
          },
          "otherAmount" : {
            "type" : "number"
          },
          "internalNotes" : {
            "maxLength" : 50000,
            "minLength" : 0,
            "type" : "string"
          },
          "publicNotes" : {
            "maxLength" : 50000,
            "minLength" : 0,
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "tags" : {
            "type" : "string"
          },
          "createdBy" : {
            "type" : "string"
          },
          "lastUpdateBy" : {
            "type" : "string"
          },
          "paymentStatus" : {
            "type" : "string",
            "description" : "Payment status.",
            "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
          },
          "fulfillmentStatus" : {
            "type" : "string",
            "description" : "Inventory fulfillment status.",
            "enum" : [ "PENDING", "COMPLETE" ]
          },
          "externalRef" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "External reference number for invoice"
          },
          "airbill" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "CONTACT_NEEDED", "COMPLETED", "DELIVERY_FAILURE", "EVENT_CANCELLED", "EVENT_RESCHEDULED", "INVESTIGATION_CLOSED", "INVESTIGATION_CLOSED_BUYER_FAVOR", "INVESTIGATION_CLOSED_SELLER_FAVOR", "INVESTIGATION_PENDING", "MANAGER_REVIEW", "ORDER_PARTIALLY_VOID_CANCELLED", "ORDER_VOID_CANCELLED", "WAITING_FOR_RESPONSE" ]
          },
          "currencyCode" : {
            "type" : "string",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          },
          "payments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoicePayment"
            }
          },
          "invoiceDeliveryLink" : {
            "$ref" : "#/components/schemas/InvoiceDeliveryLink"
          },
          "notes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceNote"
            }
          },
          "fulfillmentDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "fulfillmentByUserId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "outstandingBalance" : {
            "type" : "number"
          },
          "barcodesEntered" : {
            "type" : "boolean"
          },
          "externalTicketIdEntered" : {
            "type" : "boolean"
          },
          "filesUploaded" : {
            "type" : "boolean"
          }
        }
      },
      "InvoiceDeliveryLink" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean"
          },
          "description" : {
            "type" : "string"
          },
          "allTicketsWithBarcodes" : {
            "type" : "boolean"
          },
          "allTicketsWithPdfs" : {
            "type" : "boolean"
          }
        }
      },
      "InvoiceNote" : {
        "required" : [ "text" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "text" : {
            "type" : "string"
          },
          "author" : {
            "type" : "string"
          }
        }
      },
      "InvoicePayment" : {
        "required" : [ "accountId", "amount" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "referenceNumber" : {
            "maxLength" : 65,
            "minLength" : 0,
            "type" : "string"
          },
          "amount" : {
            "type" : "number",
            "description" : "The total for this payment."
          },
          "paymentDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "userId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "entityId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "paymentType" : {
            "type" : "string",
            "enum" : [ "INVOICE", "PURCHASE" ]
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          },
          "invoiceId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "InvoiceTicket" : {
        "type" : "object",
        "properties" : {
          "invoiceId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "ticketId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "section" : {
            "type" : "string"
          },
          "row" : {
            "type" : "string"
          },
          "seatNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "barCode" : {
            "type" : "string"
          },
          "externalTicketId" : {
            "type" : "string"
          }
        }
      },
      "Payment" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number"
          },
          "comments" : {
            "type" : "string"
          },
          "card" : {
            "$ref" : "#/components/schemas/CreditCard"
          },
          "creditCard" : {
            "$ref" : "#/components/schemas/CreditCard"
          }
        }
      },
      "RefundRequest" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number"
          },
          "comments" : {
            "type" : "string"
          }
        }
      },
      "InvoiceSummary" : {
        "required" : [ "fulfillmentStatus", "lines", "otherAmount", "paymentStatus", "salesTerm", "shippingAmount", "taxAmount" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "customerId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "internalId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Line"
            }
          },
          "salesTerm" : {
            "type" : "string",
            "enum" : [ "NET0", "NET10", "NET15", "NET25", "NET30", "NET45", "NET60" ]
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          },
          "paymentRef" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "deliveryMethod" : {
            "type" : "string",
            "enum" : [ "COURIER", "EMAIL", "USPS", "UPS", "FEDEX", "WILLCALL", "PAPERLESS", "MEETANDGREET", "FLASHSEATS", "MOBILE_DELIVERY", "OFFICE_PICKUP", "OTHER" ]
          },
          "shippingAddressId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "billingAddressId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "shippingAmount" : {
            "type" : "number"
          },
          "otherAmount" : {
            "type" : "number"
          },
          "internalNotes" : {
            "maxLength" : 50000,
            "minLength" : 0,
            "type" : "string"
          },
          "publicNotes" : {
            "maxLength" : 50000,
            "minLength" : 0,
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "tags" : {
            "type" : "string"
          },
          "createdBy" : {
            "type" : "string"
          },
          "lastUpdateBy" : {
            "type" : "string"
          },
          "paymentStatus" : {
            "type" : "string",
            "description" : "Payment status.",
            "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
          },
          "fulfillmentStatus" : {
            "type" : "string",
            "description" : "Inventory fulfillment status.",
            "enum" : [ "PENDING", "COMPLETE" ]
          },
          "externalRef" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "External reference number for invoice"
          },
          "airbill" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "CONTACT_NEEDED", "COMPLETED", "DELIVERY_FAILURE", "EVENT_CANCELLED", "EVENT_RESCHEDULED", "INVESTIGATION_CLOSED", "INVESTIGATION_CLOSED_BUYER_FAVOR", "INVESTIGATION_CLOSED_SELLER_FAVOR", "INVESTIGATION_PENDING", "MANAGER_REVIEW", "ORDER_PARTIALLY_VOID_CANCELLED", "ORDER_VOID_CANCELLED", "WAITING_FOR_RESPONSE" ]
          },
          "currencyCode" : {
            "type" : "string",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          },
          "payments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoicePayment"
            }
          },
          "invoiceDeliveryLink" : {
            "$ref" : "#/components/schemas/InvoiceDeliveryLink"
          },
          "notes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InvoiceNote"
            }
          },
          "fulfillmentDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "fulfillmentByUserId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "outstandingBalance" : {
            "type" : "number"
          },
          "barcodesEntered" : {
            "type" : "boolean"
          },
          "externalTicketIdEntered" : {
            "type" : "boolean"
          },
          "filesUploaded" : {
            "type" : "boolean"
          },
          "displayName" : {
            "type" : "string"
          },
          "lineCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "section" : {
            "type" : "string"
          },
          "row" : {
            "type" : "string"
          },
          "seats" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string"
          },
          "lineTotal" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "performer" : {
            "type" : "string"
          },
          "invoiceInHandDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "paymentDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "totalPayments" : {
            "type" : "number"
          },
          "received" : {
            "type" : "string"
          },
          "vendor" : {
            "type" : "string"
          },
          "venue" : {
            "type" : "string"
          },
          "chargedCreditCards" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "lastInvoiceNotes" : {
            "type" : "string"
          },
          "lastInvoiceNotesUser" : {
            "type" : "string"
          },
          "stockType" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
            }
          },
          "purchaseId" : {
            "type" : "string"
          },
          "lastInvoiceStatusDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastInvoiceStatusUser" : {
            "type" : "string"
          }
        }
      },
      "BulkInvoiceUpdate" : {
        "required" : [ "invoiceIds" ],
        "type" : "object",
        "properties" : {
          "invoiceIds" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "paymentStatus" : {
            "type" : "string",
            "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          },
          "fulfillmentStatus" : {
            "type" : "string",
            "enum" : [ "PENDING", "COMPLETE" ]
          },
          "paymentRef" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentRefPaymentMethod" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          },
          "customerId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceNote" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "CONTACT_NEEDED", "COMPLETED", "DELIVERY_FAILURE", "EVENT_CANCELLED", "EVENT_RESCHEDULED", "INVESTIGATION_CLOSED", "INVESTIGATION_CLOSED_BUYER_FAVOR", "INVESTIGATION_CLOSED_SELLER_FAVOR", "INVESTIGATION_PENDING", "MANAGER_REVIEW", "ORDER_PARTIALLY_VOID_CANCELLED", "ORDER_VOID_CANCELLED", "WAITING_FOR_RESPONSE" ]
          }
        }
      },
      "InvoiceCurrencyUpdateBulkAction" : {
        "required" : [ "currencyCode", "invoiceIds", "invoiceLineIds" ],
        "type" : "object",
        "properties" : {
          "invoiceIds" : {
            "type" : "array",
            "description" : "List or invoice ids.",
            "items" : {
              "type" : "integer",
              "description" : "List or invoice ids.",
              "format" : "int64"
            }
          },
          "invoiceLineIds" : {
            "type" : "array",
            "description" : "List of invoice line ids.",
            "items" : {
              "type" : "integer",
              "description" : "List of invoice line ids.",
              "format" : "int64"
            }
          },
          "currencyCode" : {
            "type" : "string",
            "description" : "New currency code.",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          },
          "exchangeRate" : {
            "type" : "number",
            "description" : "Exchange rate (null means ignored)"
          },
          "force" : {
            "type" : "boolean"
          }
        }
      },
      "BulkLineUpdate" : {
        "required" : [ "lineIds" ],
        "type" : "object",
        "properties" : {
          "lineIds" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Line id's which will be updated.",
            "items" : {
              "type" : "integer",
              "description" : "Line id's which will be updated.",
              "format" : "int64"
            }
          },
          "lineReplaceAction" : {
            "$ref" : "#/components/schemas/PurchaseLineReplaceAction"
          }
        }
      },
      "PurchaseLineReplaceAction" : {
        "type" : "object",
        "properties" : {
          "section" : {
            "type" : "string"
          },
          "row" : {
            "type" : "string"
          },
          "lowSeat" : {
            "type" : "integer",
            "format" : "int32"
          },
          "force" : {
            "type" : "boolean"
          },
          "seatType" : {
            "type" : "string",
            "enum" : [ "CONSECUTIVE", "ALTERNATING", "GA", "PIGGYBACK" ]
          }
        }
      },
      "InventoryMapping" : {
        "required" : [ "eventName", "venueName" ],
        "type" : "object",
        "properties" : {
          "eventName" : {
            "type" : "string"
          },
          "venueName" : {
            "type" : "string"
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "purchaseLineId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "responseStatus" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sendCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mappedByUserId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "mappedDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "valid" : {
            "type" : "boolean"
          }
        }
      },
      "InventoryMappingSummary" : {
        "required" : [ "eventName", "venueName" ],
        "type" : "object",
        "properties" : {
          "eventName" : {
            "type" : "string"
          },
          "venueName" : {
            "type" : "string"
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "purchaseLineId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "responseStatus" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sendCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "mappedByUserId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "mappedDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "purchaseId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int64"
          },
          "section" : {
            "type" : "string"
          },
          "row" : {
            "type" : "string"
          },
          "seats" : {
            "type" : "string"
          },
          "cost" : {
            "type" : "number"
          },
          "externalRef" : {
            "type" : "string"
          },
          "currencyCode" : {
            "type" : "string",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          },
          "valid" : {
            "type" : "boolean"
          }
        }
      },
      "PricingGroup" : {
        "required" : [ "accountId", "active", "inventory", "pricingGroupId", "productionId", "updatedByUser", "updatedDate" ],
        "type" : "object",
        "properties" : {
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "productionId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "pricingGroupId" : {
            "type" : "string"
          },
          "pricingGroupName" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean"
          },
          "inventory" : {
            "maxItems" : 2147483647,
            "minItems" : 1,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PricingGroupInventory"
            }
          },
          "updatedByUser" : {
            "type" : "integer",
            "format" : "int64"
          },
          "updatedDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "PricingGroupInventory" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "operation" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PurchaseSummary" : {
        "required" : [ "currencyCode", "deliveryMethod", "dueDate", "lines", "otherAmount", "paymentMethod", "paymentStatus", "purchaseTerm", "shippingAmount", "taxAmount" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "vendorId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "internalId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Line"
            }
          },
          "purchaseTerm" : {
            "type" : "string",
            "enum" : [ "NET0", "NET10", "NET15", "NET25", "NET30", "NET45", "NET60" ]
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          },
          "paymentRef" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "deliveryMethod" : {
            "type" : "string",
            "enum" : [ "COURIER", "EMAIL", "USPS", "UPS", "FEDEX", "WILLCALL", "PAPERLESS", "MEETANDGREET", "FLASHSEATS", "MOBILE_DELIVERY", "OFFICE_PICKUP", "OTHER" ]
          },
          "shippingAddressId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "billingAddressId" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          },
          "taxAmount" : {
            "type" : "number"
          },
          "shippingAmount" : {
            "type" : "number"
          },
          "otherAmount" : {
            "type" : "number"
          },
          "internalNotes" : {
            "maxLength" : 10000,
            "minLength" : 0,
            "type" : "string"
          },
          "publicNotes" : {
            "maxLength" : 10000,
            "minLength" : 0,
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "tags" : {
            "type" : "string"
          },
          "createdBy" : {
            "type" : "string"
          },
          "lastUpdateBy" : {
            "type" : "string"
          },
          "externalRef" : {
            "type" : "string",
            "description" : "External reference number for purchase"
          },
          "paymentStatus" : {
            "type" : "string",
            "description" : "Payment status",
            "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
          },
          "creditCardId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "creditCardGroupId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "currencyCode" : {
            "type" : "string",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          },
          "payments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PurchasePayment"
            }
          },
          "notes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PurchaseNote"
            }
          },
          "received" : {
            "type" : "boolean"
          },
          "consignment" : {
            "$ref" : "#/components/schemas/Consignment"
          },
          "cooperative" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "CONTACT_NEEDED", "COMPLETED", "DELIVERY_FAILURE", "EVENT_CANCELLED", "EVENT_RESCHEDULED", "INVESTIGATION_CLOSED", "INVESTIGATION_CLOSED_BUYER_FAVOR", "INVESTIGATION_CLOSED_SELLER_FAVOR", "INVESTIGATION_PENDING", "MANAGER_REVIEW", "ORDER_PARTIALLY_VOID_CANCELLED", "ORDER_VOID_CANCELLED", "WAITING_FOR_RESPONSE" ]
          },
          "airbill" : {
            "type" : "string"
          },
          "outstandingBalance" : {
            "type" : "number"
          },
          "autoPo" : {
            "type" : "boolean",
            "writeOnly" : true
          },
          "displayName" : {
            "type" : "string"
          },
          "consignmentStatus" : {
            "type" : "string"
          },
          "eventName" : {
            "type" : "string"
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "section" : {
            "type" : "string"
          },
          "row" : {
            "type" : "string"
          },
          "lineCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lineTotal" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "totalPayments" : {
            "type" : "number"
          },
          "lastPurchasePaymentNote" : {
            "type" : "string"
          },
          "hasZoneSeatingInventory" : {
            "type" : "boolean"
          }
        }
      },
      "BulkPurchaseUpdate" : {
        "required" : [ "purchaseIds" ],
        "type" : "object",
        "properties" : {
          "purchaseIds" : {
            "type" : "array",
            "description" : "Purchase id's which will be updated.",
            "items" : {
              "type" : "integer",
              "description" : "Purchase id's which will be updated.",
              "format" : "int64"
            }
          },
          "paymentStatus" : {
            "type" : "string",
            "description" : "Payment status to update.",
            "enum" : [ "UNPAID", "PAID", "PARTIAL", "VOID" ]
          },
          "externalRef" : {
            "type" : "string",
            "description" : "External reference to update."
          },
          "received" : {
            "type" : "boolean",
            "description" : "Updates whether PO is received."
          },
          "currencyCode" : {
            "type" : "string",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          },
          "paymentRef" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "paymentReferenceNumber" : {
            "type" : "string"
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          },
          "vendorId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cooperative" : {
            "type" : "boolean"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "CONTACT_NEEDED", "COMPLETED", "DELIVERY_FAILURE", "EVENT_CANCELLED", "EVENT_RESCHEDULED", "INVESTIGATION_CLOSED", "INVESTIGATION_CLOSED_BUYER_FAVOR", "INVESTIGATION_CLOSED_SELLER_FAVOR", "INVESTIGATION_PENDING", "MANAGER_REVIEW", "ORDER_PARTIALLY_VOID_CANCELLED", "ORDER_VOID_CANCELLED", "WAITING_FOR_RESPONSE" ]
          },
          "splitAmount" : {
            "maximum" : 100,
            "minimum" : 0,
            "type" : "number"
          }
        }
      },
      "CurrencyUpdateBulkAction" : {
        "required" : [ "currencyCode", "purchaseIds", "purchaseLineIds" ],
        "type" : "object",
        "properties" : {
          "purchaseIds" : {
            "type" : "array",
            "description" : "List or purchase ids.",
            "items" : {
              "type" : "integer",
              "description" : "List or purchase ids.",
              "format" : "int64"
            }
          },
          "purchaseLineIds" : {
            "type" : "array",
            "description" : "List of purchase line ids.",
            "items" : {
              "type" : "integer",
              "description" : "List of purchase line ids.",
              "format" : "int64"
            }
          },
          "currencyCode" : {
            "type" : "string",
            "description" : "New currency code.",
            "enum" : [ "USD", "CAD", "EUR", "GBP", "JPY", "BRL", "XBT", "AUD", "MXN" ]
          },
          "exchangeRate" : {
            "type" : "number",
            "description" : "Exchange rate (null means ignored)"
          },
          "force" : {
            "type" : "boolean"
          },
          "purchaseLineId" : {
            "type" : "array",
            "writeOnly" : true,
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "QuickSearchResult" : {
        "type" : "object",
        "properties" : {
          "entityId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "entityType" : {
            "type" : "string",
            "enum" : [ "INVOICE", "PURCHASE", "INVENTORY", "HOLD" ]
          },
          "matchedField" : {
            "type" : "string"
          },
          "externalRef" : {
            "type" : "string"
          }
        }
      },
      "Report" : {
        "type" : "object",
        "properties" : {
          "reportDefinition" : {
            "$ref" : "#/components/schemas/ReportDefinition"
          },
          "results" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "version" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ReportColumn" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          },
          "dataType" : {
            "type" : "string"
          },
          "dataExpression" : {
            "type" : "string"
          },
          "total" : {
            "type" : "boolean"
          },
          "totalExpression" : {
            "type" : "string"
          },
          "defaultHidden" : {
            "type" : "boolean"
          },
          "maxLength" : {
            "type" : "integer",
            "format" : "int32"
          },
          "enumName" : {
            "type" : "string"
          },
          "linkExpression" : {
            "type" : "string"
          },
          "size" : {
            "type" : "string"
          },
          "align" : {
            "type" : "string"
          },
          "copyToClipboard" : {
            "type" : "boolean"
          },
          "clickExpression" : {
            "type" : "string"
          },
          "minimum" : {
            "type" : "string"
          }
        }
      },
      "ReportDefinition" : {
        "required" : [ "columns", "defaultSortDir", "defaultSortedBy", "description", "mapperMethodName", "name", "parameters", "validations" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "help" : {
            "type" : "string"
          },
          "isFilteringRequired" : {
            "type" : "boolean"
          },
          "parameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReportParameter"
            }
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReportGroup"
            }
          },
          "columns" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReportColumn"
            }
          },
          "validations" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "mapperMethodName" : {
            "type" : "string"
          },
          "defaultSortedBy" : {
            "type" : "string"
          },
          "defaultSortDir" : {
            "type" : "string"
          },
          "sortingDisabled" : {
            "type" : "boolean"
          },
          "category" : {
            "type" : "string",
            "enum" : [ "ACCOUNTING", "INVENTORY", "PROFIT_LOSS", "SALES", "PURCHASES", "PRICING", "OPERATION_FULFILLMENT" ]
          }
        }
      },
      "ReportGroup" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ReportParameter" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "DATE", "DATERANGE", "EMAIL", "NUMBER", "TEXT", "CUSTOMER", "VENDOR", "PERFORMER", "EVENT_TYPE", "CATEGORY", "EXCLUDE_CATEGORY", "ENUM", "CHECKBOX", "BOOLEAN", "DAYOFWEEK", "TAGS", "CREDITCARDGROUP", "USER", "MULTIPLE_ENTITY" ]
          },
          "value" : {
            "type" : "object"
          },
          "defaultValue" : {
            "type" : "string"
          },
          "options" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "gmt" : {
            "type" : "boolean"
          },
          "required" : {
            "type" : "boolean"
          },
          "isIllegalFilter" : {
            "type" : "boolean"
          },
          "defaultHidden" : {
            "type" : "boolean"
          },
          "disableAllAnySelector" : {
            "type" : "boolean"
          },
          "table" : {
            "type" : "string"
          },
          "column" : {
            "type" : "string"
          },
          "pattern" : {
            "type" : "string"
          },
          "mode" : {
            "type" : "string"
          },
          "isMulti" : {
            "type" : "boolean"
          },
          "illegalFilter" : {
            "type" : "boolean"
          }
        }
      },
      "ReportSnapshotFilter" : {
        "required" : [ "name", "value" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "labelValue" : {
            "type" : "string"
          },
          "value" : {
            "type" : "object"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "DATE", "DATERANGE", "EMAIL", "NUMBER", "TEXT", "CUSTOMER", "VENDOR", "PERFORMER", "EVENT_TYPE", "CATEGORY", "EXCLUDE_CATEGORY", "ENUM", "CHECKBOX", "BOOLEAN", "DAYOFWEEK", "TAGS", "CREDITCARDGROUP", "USER", "MULTIPLE_ENTITY" ]
          },
          "gmt" : {
            "type" : "boolean"
          }
        }
      },
      "ReportSnapshotResult" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "scheduleId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "reportId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReportSnapshotFilter"
            }
          },
          "assetName" : {
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "scheduledDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "notes" : {
            "type" : "string"
          },
          "notificationEmails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "report" : {
            "$ref" : "#/components/schemas/Report"
          }
        }
      },
      "ReportSnapshot" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "scheduleId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "reportId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReportSnapshotFilter"
            }
          },
          "assetName" : {
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "scheduledDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "notes" : {
            "type" : "string"
          },
          "notificationEmails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "EventProfitability" : {
        "type" : "object",
        "properties" : {
          "item" : {
            "$ref" : "#/components/schemas/Event"
          },
          "profit" : {
            "$ref" : "#/components/schemas/ProfitAndLoss"
          }
        }
      },
      "ProfitAndLoss" : {
        "type" : "object",
        "properties" : {
          "sales" : {
            "type" : "number"
          },
          "plValue" : {
            "type" : "number"
          },
          "plPercentage" : {
            "type" : "number",
            "format" : "float"
          },
          "roi" : {
            "type" : "number",
            "format" : "float"
          },
          "avgTicketSales" : {
            "type" : "number"
          },
          "ticketsProfitability" : {
            "type" : "number",
            "format" : "float"
          },
          "numTickets" : {
            "type" : "integer",
            "format" : "int32"
          },
          "profitableTickets" : {
            "type" : "integer",
            "format" : "int32"
          },
          "costs" : {
            "type" : "number"
          }
        }
      },
      "PerformerProfitability" : {
        "type" : "object",
        "properties" : {
          "item" : {
            "$ref" : "#/components/schemas/Performer"
          },
          "profit" : {
            "$ref" : "#/components/schemas/ProfitAndLoss"
          }
        }
      },
      "GroupProfitability" : {
        "type" : "object",
        "properties" : {
          "item" : {
            "$ref" : "#/components/schemas/VividSeatsMapGroups"
          },
          "profit" : {
            "$ref" : "#/components/schemas/ProfitAndLoss"
          }
        }
      },
      "HeatMapSeatMapResponse" : {
        "type" : "object",
        "properties" : {
          "global" : {
            "$ref" : "#/components/schemas/VividSeatsListingGlobal"
          },
          "sections" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SectionProfitability"
            }
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GroupProfitability"
            }
          },
          "salesInMultipleEvents" : {
            "type" : "boolean"
          }
        }
      },
      "SectionProfitability" : {
        "type" : "object",
        "properties" : {
          "item" : {
            "$ref" : "#/components/schemas/Ticket"
          },
          "profit" : {
            "$ref" : "#/components/schemas/ProfitAndLoss"
          },
          "vividSeatsSection" : {
            "$ref" : "#/components/schemas/VividSeatsSection"
          }
        }
      },
      "VividSeatsListingGlobal" : {
        "type" : "object",
        "properties" : {
          "city" : {
            "type" : "string"
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "productionName" : {
            "type" : "string"
          },
          "jsonFileName" : {
            "type" : "string"
          },
          "jsonActive" : {
            "type" : "boolean"
          },
          "staticMapUrl" : {
            "type" : "string"
          },
          "mapTitle" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "dte" : {
            "type" : "integer",
            "format" : "int32",
            "writeOnly" : true
          },
          "daysToEvent" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "VividSeatsMapGroups" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "color" : {
            "type" : "string"
          },
          "mapId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "VividSeatsSection" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "groupId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "sectionId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "pattern" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "TicketSale" : {
        "type" : "object",
        "properties" : {
          "performer" : {
            "$ref" : "#/components/schemas/Performer"
          },
          "invoice" : {
            "$ref" : "#/components/schemas/Invoice"
          },
          "inventory" : {
            "$ref" : "#/components/schemas/Inventory"
          },
          "daysToEvent" : {
            "type" : "integer",
            "format" : "int32"
          },
          "profit" : {
            "$ref" : "#/components/schemas/ProfitAndLoss"
          }
        }
      },
      "TicketSales" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "$ref" : "#/components/schemas/Event"
          },
          "sales" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TicketSale"
            }
          }
        }
      },
      "VenueProfitability" : {
        "type" : "object",
        "properties" : {
          "item" : {
            "$ref" : "#/components/schemas/Venue"
          },
          "profit" : {
            "$ref" : "#/components/schemas/ProfitAndLoss"
          }
        }
      },
      "TagSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tag" : {
            "type" : "string"
          },
          "tagType" : {
            "type" : "string"
          },
          "inventoryCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "poCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "eventCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customerCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "vendorCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalCount" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "BulkTagRequest" : {
        "required" : [ "entityIds", "entityType" ],
        "type" : "object",
        "properties" : {
          "entityIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "entityType" : {
            "type" : "string",
            "enum" : [ "EVENT", "CUSTOMER", "INVENTORY", "VENDOR", "PURCHASE", "INVOICE" ]
          },
          "tagsToAdd" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tagsToRemove" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "cleanOldTags" : {
            "type" : "boolean"
          }
        }
      },
      "TagColorUpdateRequest" : {
        "required" : [ "tagName" ],
        "type" : "object",
        "properties" : {
          "tagName" : {
            "type" : "string"
          },
          "colorValue" : {
            "pattern" : "^#([a-zA-Z0-9]){3}(([a-zA-Z0-9]){3})?$",
            "type" : "string"
          }
        }
      },
      "TicketSummary" : {
        "required" : [ "cost", "faceValue", "row", "seatNumber", "section", "sellPrice", "status", "stockType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier of the ticket.",
            "format" : "int64"
          },
          "seatNumber" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "Seat number, must be numeric and passed low to high.",
            "format" : "int32"
          },
          "fileName" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string",
            "description" : "If present, a pdf file exists for this ticket."
          },
          "barCode" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string",
            "description" : "The barcode associated with this ticket."
          },
          "externalTicketId" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "External Id connecting skybox ticket with external systems/marketplaces."
          },
          "inventoryId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "invoiceLineId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "purchaseLineId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "friendlySection" : {
            "type" : "string",
            "description" : "Friendly name for Section."
          },
          "section" : {
            "maxLength" : 51,
            "minLength" : 1,
            "type" : "string"
          },
          "friendlyRow" : {
            "type" : "string",
            "description" : "Friendly name for Row."
          },
          "row" : {
            "maxLength" : 44,
            "minLength" : 1,
            "type" : "string"
          },
          "notes" : {
            "maxLength" : 1000,
            "minLength" : 0,
            "type" : "string"
          },
          "cost" : {
            "type" : "number"
          },
          "faceValue" : {
            "minimum" : 0,
            "exclusiveMinimum" : false,
            "type" : "number"
          },
          "taxedCost" : {
            "type" : "number"
          },
          "sellPrice" : {
            "minimum" : 0,
            "exclusiveMinimum" : false,
            "type" : "number"
          },
          "stockType" : {
            "type" : "string",
            "enum" : [ "HARD", "ELECTRONIC", "FLASH", "PAPERLESS", "PAPERLESS_CARD", "MOBILE_TRANSFER", "MOBILE_SCREENCAP" ]
          },
          "eventId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "SOLD", "ERROR", "CANCELLED" ]
          },
          "base64FileBytes" : {
            "type" : "string",
            "description" : "Base64 encoded byte array of the ticket file. Only used in write operations."
          },
          "disclosures" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "attributes" : {
            "type" : "array",
            "description" : "List of attributes for the ticket",
            "items" : {
              "type" : "string",
              "description" : "List of attributes for the ticket"
            }
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdBy" : {
            "type" : "string"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdateBy" : {
            "type" : "string"
          },
          "dateCancelled" : {
            "type" : "string",
            "format" : "date-time"
          },
          "cancelledByUserId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "auditNote" : {
            "type" : "string"
          },
          "invoiceDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "Role" : {
        "required" : [ "name", "permissions" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "permissions" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "EDIT_PRICE", "VIEW_EDIT_COST", "ADD_EDIT_INVOICE_PO_PAYMENT", "ACCESS_SALES_TAB", "ACCESS_CUSTOMERS_LIST", "CREATE_INVOICE", "EDIT_INVOICE_PO_COST", "REMOVE_TICKETS_FROM_INVOICE", "ACCESS_PURCHASES_TAB", "ACCESS_VENDORS_LIST", "VIEW_EDIT_CONSIGNMENT_CO_OP", "ADD_INVENTORY", "BROADCAST_UNBROADCAST_INVENTORY", "VIEW_EDIT_ZONE_STATUS", "CANCEL_REPLACE_INVENTORY", "ACCESS_REPORTS", "ACCESS_TICKER", "ACCESS_RESEARCH_DASHBOARD", "ACCESS_SHIPPING", "EDIT_ACCOUNT_LEVEL_DETAILS", "VIEW_EDIT_USER", "VIEW_EDIT_PDF_BARCODE", "EDIT_TAG", "ADMIN", "UPS_ADMIN", "SFS_ADMIN", "USER", "ACCOUNT_ADMIN", "ACCOUNT_OWNER", "ANALYST", "BASIC_USER", "LIMITED_USER", "PERFORMER_ANALYST", "TAGS_LOCKED", "VIEW_ONLY", "LIMITED_PRICER", "ACCOUNTING_RESTRICTION", "VIEW_INVENTORY", "VIEW_INVENTORY_HISTORY", "EDIT_INVENTORY", "SAVED_SEARCHES", "VIEW_EVENT_DELTA", "DELETE_EVENT_DELTA", "VIEW_ADDRESS", "VIEW_NOTIFICATIONS", "MANAGE_CUSTOMER_CREDIT", "VSFS_ADMIN", "SKYBOX_ADMIN", "SKYBOX_DEV", "ACCOUNTING_ADMIN", "PRICING_ADMIN", "SKYBOX_DRIVE_ADMIN", "SKYBOX_DRIVE_USER" ]
            }
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "User" : {
        "required" : [ "accountId", "email", "firstName", "lastName", "phone" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "for vivid seats use only",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "description" : "account id for this user. ignored on account sign up, required for user update",
            "format" : "int64"
          },
          "email" : {
            "maxLength" : 255,
            "minLength" : 6,
            "pattern" : "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
            "type" : "string",
            "description" : "user's email"
          },
          "password" : {
            "pattern" : "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=!?*])(?=\\S+$).{8,}$",
            "type" : "string",
            "description" : "user's password only required for creation",
            "writeOnly" : true
          },
          "firstName" : {
            "maxLength" : 200,
            "minLength" : 1,
            "type" : "string",
            "description" : "user's first name"
          },
          "lastName" : {
            "maxLength" : 200,
            "minLength" : 1,
            "type" : "string",
            "description" : "user's last name"
          },
          "phone" : {
            "maxLength" : 20,
            "minLength" : 10,
            "type" : "string",
            "description" : "user's phone"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "agreedToTerms" : {
            "type" : "boolean"
          },
          "agreedToReplenishmentTerms" : {
            "type" : "boolean"
          },
          "account" : {
            "$ref" : "#/components/schemas/Account"
          },
          "roles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Role"
            }
          },
          "deleted" : {
            "type" : "boolean"
          },
          "originalAccount" : {
            "type" : "integer",
            "description" : "Original account id for this user. ignored for user update, required on account sign up ",
            "format" : "int64"
          },
          "updateByUser" : {
            "type" : "integer",
            "description" : "Last user that update user rol",
            "format" : "int64"
          },
          "updateUser" : {
            "$ref" : "#/components/schemas/User"
          },
          "authenticationType" : {
            "type" : "string",
            "enum" : [ "CREDENTIAL", "EMAIL_LINK" ]
          },
          "barcodeMaskingEnabled" : {
            "type" : "boolean"
          }
        }
      },
      "BulkVendorUpdate" : {
        "required" : [ "paymentMethod", "vendorIds" ],
        "type" : "object",
        "properties" : {
          "vendorIds" : {
            "type" : "array",
            "description" : "Vendor id's which will be updated.",
            "items" : {
              "type" : "integer",
              "description" : "Vendor id's which will be updated.",
              "format" : "int64"
            }
          },
          "paymentMethod" : {
            "type" : "string",
            "description" : "Payment method to update.",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          }
        }
      },
      "Vendor" : {
        "required" : [ "address", "defaultDeliveryMethod", "displayName", "email", "paymentMethod", "purchaseTerm", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Required for updates, ignored on inserts.",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastName" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "email2" : {
            "type" : "string"
          },
          "useEmail2" : {
            "type" : "boolean"
          },
          "company" : {
            "type" : "string"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "notes" : {
            "type" : "string"
          },
          "displayName" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "MARKETPLACE", "PRIMARY", "PERFORMER", "BROKER", "INDY", "MEMBER" ]
          },
          "paymentMethod" : {
            "type" : "string",
            "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
          },
          "purchaseTerm" : {
            "type" : "string",
            "enum" : [ "NET0", "NET10", "NET15", "NET25", "NET30", "NET45", "NET60" ]
          },
          "deleted" : {
            "type" : "boolean"
          },
          "tags" : {
            "type" : "string"
          },
          "defaultDeliveryMethod" : {
            "type" : "string",
            "description" : "The default delivery method to use on purchases.",
            "enum" : [ "COURIER", "EMAIL", "USPS", "UPS", "FEDEX", "WILLCALL", "PAPERLESS", "MEETANDGREET", "FLASHSEATS", "MOBILE_DELIVERY", "OFFICE_PICKUP", "OTHER" ]
          },
          "accountDefault" : {
            "type" : "boolean",
            "description" : "True if this is the account's default vendor. Read-only."
          },
          "clientId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "brokerId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "vsrAccountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "outlawedPaymentMethods" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "CREDITCARD", "CASH", "CHECK", "PAYPAL", "TRADE", "VENMO", "OTHER", "ACCRUEDCREDIT", "ACH", "AR", "AP", "EVOPAY", "MULTIPLE", "COMPLIMENTARY", "CUSTOMER_CREDIT", "ZELLE" ]
            }
          }
        }
      },
      "SkyboxWebhook" : {
        "required" : [ "topic", "url" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "readOnly" : true
          },
          "topic" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "headers" : {
            "type" : "string"
          },
          "secret" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time",
            "readOnly" : true
          }
        }
      }
    },
    "securitySchemes" : {
      "Account" : {
        "type" : "apiKey",
        "description" : "Account identification",
        "name" : "X-Account",
        "in" : "header"
      },
      "Authorization Token" : {
        "type" : "apiKey",
        "description" : "Used to identify the account",
        "name" : "X-Api-Token",
        "in" : "header"
      },
      "Application Token" : {
        "type" : "apiKey",
        "description" : "Used to identify the app",
        "name" : "X-Application-Token",
        "in" : "header"
      }
    }
  }
}